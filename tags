!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Add	x/OpCodes.cs	/^        Add = 0x58,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Add	x/OpCodes.cs	/^        public static readonly OpCode Add = new OpCode(OpCodeValues.Add,$/;"	f	class:System.Reflection.Emit.OpCodes
Add_Ovf	x/OpCodes.cs	/^        Add_Ovf = 0xd6,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Add_Ovf	x/OpCodes.cs	/^        public static readonly OpCode Add_Ovf = new OpCode(OpCodeValues.Add_Ovf,$/;"	f	class:System.Reflection.Emit.OpCodes
Add_Ovf_Un	x/OpCodes.cs	/^        Add_Ovf_Un = 0xd7,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Add_Ovf_Un	x/OpCodes.cs	/^        public static readonly OpCode Add_Ovf_Un = new OpCode(OpCodeValues.Add_Ovf_Un,$/;"	f	class:System.Reflection.Emit.OpCodes
AddressOfEntryPoint	header_pe.h	/^    uint32_t AddressOfEntryPoint;      \/\/ The address of the entry point relative to the image base when the executable file is loaded into memory. $/;"	m	struct:TOptionalHeaderStandardFields_PE32
AddressOfEntryPoint	header_pe.h	/^    uint32_t AddressOfEntryPoint;      \/\/ The address of the entry point relative to the image base when the executable file is loaded into memory. $/;"	m	struct:TOptionalHeaderStandardFields_PE32Plus
And	x/OpCodes.cs	/^        And = 0x5f,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
And	x/OpCodes.cs	/^        public static readonly OpCode And = new OpCode(OpCodeValues.And,$/;"	f	class:System.Reflection.Emit.OpCodes
Annotation	x/OpCodeType.cs	/^        Annotation = 0,$/;"	e	enum:System.Reflection.Emit.OpCodeType	file:
Arglist	x/OpCodes.cs	/^        Arglist = 0xfe00,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Arglist	x/OpCodes.cs	/^        public static readonly OpCode Arglist = new OpCode(OpCodeValues.Arglist,$/;"	f	class:System.Reflection.Emit.OpCodes
Assembly	clr.c	/^    Assembly               = 0x20,$/;"	e	enum:TableType	file:
Assembly	x/clr.c	/^    Assembly               = 0x20,$/;"	e	enum:TableType	file:
AssemblyOS	clr.c	/^    AssemblyOS             = 0x22,$/;"	e	enum:TableType	file:
AssemblyOS	x/clr.c	/^    AssemblyOS             = 0x22,$/;"	e	enum:TableType	file:
AssemblyProcesser	clr.c	/^    AssemblyProcesser      = 0x21,$/;"	e	enum:TableType	file:
AssemblyProcesser	x/clr.c	/^    AssemblyProcesser      = 0x21,$/;"	e	enum:TableType	file:
AssemblyRef	clr.c	/^    AssemblyRef            = 0x23,$/;"	e	enum:TableType	file:
AssemblyRef	x/clr.c	/^    AssemblyRef            = 0x23,$/;"	e	enum:TableType	file:
AssemblyRefOS	clr.c	/^    AssemblyRefOS          = 0x25,$/;"	e	enum:TableType	file:
AssemblyRefOS	x/clr.c	/^    AssemblyRefOS          = 0x25,$/;"	e	enum:TableType	file:
AssemblyRefProcessor	clr.c	/^    AssemblyRefProcessor   = 0x24,$/;"	e	enum:TableType	file:
AssemblyRefProcessor	x/clr.c	/^    AssemblyRefProcessor   = 0x24,$/;"	e	enum:TableType	file:
B	clr.c	201;"	d	file:
B	clr.c	249;"	d	file:
B	x/clr.c	199;"	d	file:
B	x/clr.c	247;"	d	file:
BIN	Makefile	/^BIN=cclr$/;"	m
BaseOfCode	header_pe.h	/^    uint32_t BaseOfCode; \/\/ The address that is relative to the image base of the beginning-of-code section when it is loaded into memory.$/;"	m	struct:TOptionalHeaderStandardFields_PE32
BaseOfCode	header_pe.h	/^    uint32_t BaseOfCode; \/\/ The address that is relative to the image base of the beginning-of-code section when it is loaded into memory.$/;"	m	struct:TOptionalHeaderStandardFields_PE32Plus
BaseOfData	header_pe.h	/^    uint32_t BaseOfData; \/\/ The address that is relative to the image base of the beginning-of-data section when it is loaded into memory.$/;"	m	struct:TOptionalHeaderStandardFields_PE32
Beq	x/OpCodes.cs	/^        Beq = 0x3b,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Beq	x/OpCodes.cs	/^        public static readonly OpCode Beq = new OpCode(OpCodeValues.Beq,$/;"	f	class:System.Reflection.Emit.OpCodes
Beq_S	x/OpCodes.cs	/^        Beq_S = 0x2e,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Beq_S	x/OpCodes.cs	/^        public static readonly OpCode Beq_S = new OpCode(OpCodeValues.Beq_S,$/;"	f	class:System.Reflection.Emit.OpCodes
Bge	x/OpCodes.cs	/^        Bge = 0x3c,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Bge	x/OpCodes.cs	/^        public static readonly OpCode Bge = new OpCode(OpCodeValues.Bge,$/;"	f	class:System.Reflection.Emit.OpCodes
Bge_S	x/OpCodes.cs	/^        Bge_S = 0x2f,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Bge_S	x/OpCodes.cs	/^        public static readonly OpCode Bge_S = new OpCode(OpCodeValues.Bge_S,$/;"	f	class:System.Reflection.Emit.OpCodes
Bge_Un	x/OpCodes.cs	/^        Bge_Un = 0x41,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Bge_Un	x/OpCodes.cs	/^        public static readonly OpCode Bge_Un = new OpCode(OpCodeValues.Bge_Un,$/;"	f	class:System.Reflection.Emit.OpCodes
Bge_Un_S	x/OpCodes.cs	/^        Bge_Un_S = 0x34,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Bge_Un_S	x/OpCodes.cs	/^        public static readonly OpCode Bge_Un_S = new OpCode(OpCodeValues.Bge_Un_S,$/;"	f	class:System.Reflection.Emit.OpCodes
Bgt	x/OpCodes.cs	/^        Bgt = 0x3d,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Bgt	x/OpCodes.cs	/^        public static readonly OpCode Bgt = new OpCode(OpCodeValues.Bgt,$/;"	f	class:System.Reflection.Emit.OpCodes
Bgt_S	x/OpCodes.cs	/^        Bgt_S = 0x30,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Bgt_S	x/OpCodes.cs	/^        public static readonly OpCode Bgt_S = new OpCode(OpCodeValues.Bgt_S,$/;"	f	class:System.Reflection.Emit.OpCodes
Bgt_Un	x/OpCodes.cs	/^        Bgt_Un = 0x42,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Bgt_Un	x/OpCodes.cs	/^        public static readonly OpCode Bgt_Un = new OpCode(OpCodeValues.Bgt_Un,$/;"	f	class:System.Reflection.Emit.OpCodes
Bgt_Un_S	x/OpCodes.cs	/^        Bgt_Un_S = 0x35,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Bgt_Un_S	x/OpCodes.cs	/^        public static readonly OpCode Bgt_Un_S = new OpCode(OpCodeValues.Bgt_Un_S,$/;"	f	class:System.Reflection.Emit.OpCodes
Ble	x/OpCodes.cs	/^        Ble = 0x3e,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ble	x/OpCodes.cs	/^        public static readonly OpCode Ble = new OpCode(OpCodeValues.Ble,$/;"	f	class:System.Reflection.Emit.OpCodes
Ble_S	x/OpCodes.cs	/^        Ble_S = 0x31,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ble_S	x/OpCodes.cs	/^        public static readonly OpCode Ble_S = new OpCode(OpCodeValues.Ble_S,$/;"	f	class:System.Reflection.Emit.OpCodes
Ble_Un	x/OpCodes.cs	/^        Ble_Un = 0x43,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ble_Un	x/OpCodes.cs	/^        public static readonly OpCode Ble_Un = new OpCode(OpCodeValues.Ble_Un,$/;"	f	class:System.Reflection.Emit.OpCodes
Ble_Un_S	x/OpCodes.cs	/^        Ble_Un_S = 0x36,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ble_Un_S	x/OpCodes.cs	/^        public static readonly OpCode Ble_Un_S = new OpCode(OpCodeValues.Ble_Un_S,$/;"	f	class:System.Reflection.Emit.OpCodes
Blt	x/OpCodes.cs	/^        Blt = 0x3f,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Blt	x/OpCodes.cs	/^        public static readonly OpCode Blt = new OpCode(OpCodeValues.Blt,$/;"	f	class:System.Reflection.Emit.OpCodes
Blt_S	x/OpCodes.cs	/^        Blt_S = 0x32,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Blt_S	x/OpCodes.cs	/^        public static readonly OpCode Blt_S = new OpCode(OpCodeValues.Blt_S,$/;"	f	class:System.Reflection.Emit.OpCodes
Blt_Un	x/OpCodes.cs	/^        Blt_Un = 0x44,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Blt_Un	x/OpCodes.cs	/^        public static readonly OpCode Blt_Un = new OpCode(OpCodeValues.Blt_Un,$/;"	f	class:System.Reflection.Emit.OpCodes
Blt_Un_S	x/OpCodes.cs	/^        Blt_Un_S = 0x37,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Blt_Un_S	x/OpCodes.cs	/^        public static readonly OpCode Blt_Un_S = new OpCode(OpCodeValues.Blt_Un_S,$/;"	f	class:System.Reflection.Emit.OpCodes
Bne_Un	x/OpCodes.cs	/^        Bne_Un = 0x40,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Bne_Un	x/OpCodes.cs	/^        public static readonly OpCode Bne_Un = new OpCode(OpCodeValues.Bne_Un,$/;"	f	class:System.Reflection.Emit.OpCodes
Bne_Un_S	x/OpCodes.cs	/^        Bne_Un_S = 0x33,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Bne_Un_S	x/OpCodes.cs	/^        public static readonly OpCode Bne_Un_S = new OpCode(OpCodeValues.Bne_Un_S,$/;"	f	class:System.Reflection.Emit.OpCodes
Box	x/OpCodes.cs	/^        Box = 0x8c,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Box	x/OpCodes.cs	/^        public static readonly OpCode Box = new OpCode(OpCodeValues.Box,$/;"	f	class:System.Reflection.Emit.OpCodes
Br	x/OpCodes.cs	/^        Br = 0x38,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Br	x/OpCodes.cs	/^        public static readonly OpCode Br = new OpCode(OpCodeValues.Br,$/;"	f	class:System.Reflection.Emit.OpCodes
Br_S	x/OpCodes.cs	/^        Br_S = 0x2b,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Br_S	x/OpCodes.cs	/^        public static readonly OpCode Br_S = new OpCode(OpCodeValues.Br_S,$/;"	f	class:System.Reflection.Emit.OpCodes
Branch	x/FlowControl.cs	/^        Branch = 0,$/;"	e	enum:System.Reflection.Emit.FlowControl	file:
Break	x/FlowControl.cs	/^        Break = 1,$/;"	e	enum:System.Reflection.Emit.FlowControl	file:
Break	x/OpCodes.cs	/^        Break = 0x01,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Break	x/OpCodes.cs	/^        public static readonly OpCode Break = new OpCode(OpCodeValues.Break,$/;"	f	class:System.Reflection.Emit.OpCodes
Brfalse	x/OpCodes.cs	/^        Brfalse = 0x39,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Brfalse	x/OpCodes.cs	/^        public static readonly OpCode Brfalse = new OpCode(OpCodeValues.Brfalse,$/;"	f	class:System.Reflection.Emit.OpCodes
Brfalse_S	x/OpCodes.cs	/^        Brfalse_S = 0x2c,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Brfalse_S	x/OpCodes.cs	/^        public static readonly OpCode Brfalse_S = new OpCode(OpCodeValues.Brfalse_S,$/;"	f	class:System.Reflection.Emit.OpCodes
Brtrue	x/OpCodes.cs	/^        Brtrue = 0x3a,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Brtrue	x/OpCodes.cs	/^        public static readonly OpCode Brtrue = new OpCode(OpCodeValues.Brtrue,$/;"	f	class:System.Reflection.Emit.OpCodes
Brtrue_S	x/OpCodes.cs	/^        Brtrue_S = 0x2d,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Brtrue_S	x/OpCodes.cs	/^        public static readonly OpCode Brtrue_S = new OpCode(OpCodeValues.Brtrue_S,$/;"	f	class:System.Reflection.Emit.OpCodes
COFFFileHeader	header_pe.h	/^	struct TCOFFFileHeader * COFFFileHeader;$/;"	m	struct:PEFile	typeref:struct:PEFile::TCOFFFileHeader
Call	x/FlowControl.cs	/^        Call = 2,$/;"	e	enum:System.Reflection.Emit.FlowControl	file:
Call	x/OpCodes.cs	/^        Call = 0x28,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Call	x/OpCodes.cs	/^        public static readonly OpCode Call = new OpCode(OpCodeValues.Call,$/;"	f	class:System.Reflection.Emit.OpCodes
Calli	x/OpCodes.cs	/^        Calli = 0x29,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Calli	x/OpCodes.cs	/^        public static readonly OpCode Calli = new OpCode(OpCodeValues.Calli,$/;"	f	class:System.Reflection.Emit.OpCodes
Callvirt	x/OpCodes.cs	/^        Callvirt = 0x6f,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Callvirt	x/OpCodes.cs	/^        public static readonly OpCode Callvirt = new OpCode(OpCodeValues.Callvirt,$/;"	f	class:System.Reflection.Emit.OpCodes
Castclass	x/OpCodes.cs	/^        Castclass = 0x74,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Castclass	x/OpCodes.cs	/^        public static readonly OpCode Castclass = new OpCode(OpCodeValues.Castclass,$/;"	f	class:System.Reflection.Emit.OpCodes
Cb	header_clr.h	/^    uint32_t Cb; \/\/ Size of the header in bytes$/;"	m	struct:TCLRHeader
Cb	x/header_clr.h	/^    uint32_t Cb; \/\/ Size of the header in bytes$/;"	m	struct:TCLRHeader
Ceq	x/OpCodes.cs	/^        Ceq = 0xfe01,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ceq	x/OpCodes.cs	/^        public static readonly OpCode Ceq = new OpCode(OpCodeValues.Ceq,$/;"	f	class:System.Reflection.Emit.OpCodes
Cgt	x/OpCodes.cs	/^        Cgt = 0xfe02,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Cgt	x/OpCodes.cs	/^        public static readonly OpCode Cgt = new OpCode(OpCodeValues.Cgt,$/;"	f	class:System.Reflection.Emit.OpCodes
Cgt_Un	x/OpCodes.cs	/^        Cgt_Un = 0xfe03,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Cgt_Un	x/OpCodes.cs	/^        public static readonly OpCode Cgt_Un = new OpCode(OpCodeValues.Cgt_Un,$/;"	f	class:System.Reflection.Emit.OpCodes
Characteristics	header_pe.h	/^    uint16_t Characteristics;        \/\/ The flags that indicate the attributes of the file. For specific flag values, see Characteristics.$/;"	m	struct:TCOFFFileHeader
Characteristics	header_pe.h	/^    uint32_t Characteristics; \/\/ The flags that describe the characteristics of the section. For more information, see Section Flags.$/;"	m	struct:TSectionTable
CheckSum	header_pe.h	/^    uint32_t CheckSum;            \/\/ The image file checksum. $/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32
CheckSum	header_pe.h	/^    uint32_t CheckSum;            \/\/ The image file checksum. $/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32Plus
Ckfinite	x/OpCodes.cs	/^        Ckfinite = 0xc3,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ckfinite	x/OpCodes.cs	/^        public static readonly OpCode Ckfinite = new OpCode(OpCodeValues.Ckfinite,$/;"	f	class:System.Reflection.Emit.OpCodes
ClassLayout	clr.c	/^	ClassLayout            = 0x0F,$/;"	e	enum:TableType	file:
ClassLayout	x/clr.c	/^	ClassLayout            = 0x0F,$/;"	e	enum:TableType	file:
Clt	x/OpCodes.cs	/^        Clt = 0xfe04,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Clt	x/OpCodes.cs	/^        public static readonly OpCode Clt = new OpCode(OpCodeValues.Clt,$/;"	f	class:System.Reflection.Emit.OpCodes
Clt_Un	x/OpCodes.cs	/^        Clt_Un = 0xfe05,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Clt_Un	x/OpCodes.cs	/^        public static readonly OpCode Clt_Un = new OpCode(OpCodeValues.Clt_Un,$/;"	f	class:System.Reflection.Emit.OpCodes
CodeManagerTable	header_clr.h	/^    uint64_t CodeManagerTable; \/\/ Always 0 (§II.24.1).$/;"	m	struct:TCLRHeader
CodeManagerTable	x/header_clr.h	/^    uint64_t CodeManagerTable; \/\/ Always 0 (§II.24.1).$/;"	m	struct:TCLRHeader
Cond_Branch	x/FlowControl.cs	/^        Cond_Branch = 3,$/;"	e	enum:System.Reflection.Emit.FlowControl	file:
Constant	clr.c	/^    Constant               = 0x0B,$/;"	e	enum:TableType	file:
Constant	x/clr.c	/^    Constant               = 0x0B,$/;"	e	enum:TableType	file:
Constrained	x/OpCodes.cs	/^        public static readonly OpCode Constrained = new OpCode(OpCodeValues.Constrained_,$/;"	f	class:System.Reflection.Emit.OpCodes
Constrained_	x/OpCodes.cs	/^        Constrained_ = 0xfe16,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Context	header_clr.h	/^struct Context {$/;"	s
Context	x/header_clr.h	/^struct Context {$/;"	s
Conv_I	x/OpCodes.cs	/^        Conv_I = 0xd3,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Conv_I	x/OpCodes.cs	/^        public static readonly OpCode Conv_I = new OpCode(OpCodeValues.Conv_I,$/;"	f	class:System.Reflection.Emit.OpCodes
Conv_I1	x/OpCodes.cs	/^        Conv_I1 = 0x67,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Conv_I1	x/OpCodes.cs	/^        public static readonly OpCode Conv_I1 = new OpCode(OpCodeValues.Conv_I1,$/;"	f	class:System.Reflection.Emit.OpCodes
Conv_I2	x/OpCodes.cs	/^        Conv_I2 = 0x68,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Conv_I2	x/OpCodes.cs	/^        public static readonly OpCode Conv_I2 = new OpCode(OpCodeValues.Conv_I2,$/;"	f	class:System.Reflection.Emit.OpCodes
Conv_I4	x/OpCodes.cs	/^        Conv_I4 = 0x69,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Conv_I4	x/OpCodes.cs	/^        public static readonly OpCode Conv_I4 = new OpCode(OpCodeValues.Conv_I4,$/;"	f	class:System.Reflection.Emit.OpCodes
Conv_I8	x/OpCodes.cs	/^        Conv_I8 = 0x6a,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Conv_I8	x/OpCodes.cs	/^        public static readonly OpCode Conv_I8 = new OpCode(OpCodeValues.Conv_I8,$/;"	f	class:System.Reflection.Emit.OpCodes
Conv_Ovf_I	x/OpCodes.cs	/^        Conv_Ovf_I = 0xd4,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Conv_Ovf_I	x/OpCodes.cs	/^        public static readonly OpCode Conv_Ovf_I = new OpCode(OpCodeValues.Conv_Ovf_I,$/;"	f	class:System.Reflection.Emit.OpCodes
Conv_Ovf_I1	x/OpCodes.cs	/^        Conv_Ovf_I1 = 0xb3,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Conv_Ovf_I1	x/OpCodes.cs	/^        public static readonly OpCode Conv_Ovf_I1 = new OpCode(OpCodeValues.Conv_Ovf_I1,$/;"	f	class:System.Reflection.Emit.OpCodes
Conv_Ovf_I1_Un	x/OpCodes.cs	/^        Conv_Ovf_I1_Un = 0x82,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Conv_Ovf_I1_Un	x/OpCodes.cs	/^        public static readonly OpCode Conv_Ovf_I1_Un = new OpCode(OpCodeValues.Conv_Ovf_I1_Un,$/;"	f	class:System.Reflection.Emit.OpCodes
Conv_Ovf_I2	x/OpCodes.cs	/^        Conv_Ovf_I2 = 0xb5,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Conv_Ovf_I2	x/OpCodes.cs	/^        public static readonly OpCode Conv_Ovf_I2 = new OpCode(OpCodeValues.Conv_Ovf_I2,$/;"	f	class:System.Reflection.Emit.OpCodes
Conv_Ovf_I2_Un	x/OpCodes.cs	/^        Conv_Ovf_I2_Un = 0x83,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Conv_Ovf_I2_Un	x/OpCodes.cs	/^        public static readonly OpCode Conv_Ovf_I2_Un = new OpCode(OpCodeValues.Conv_Ovf_I2_Un,$/;"	f	class:System.Reflection.Emit.OpCodes
Conv_Ovf_I4	x/OpCodes.cs	/^        Conv_Ovf_I4 = 0xb7,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Conv_Ovf_I4	x/OpCodes.cs	/^        public static readonly OpCode Conv_Ovf_I4 = new OpCode(OpCodeValues.Conv_Ovf_I4,$/;"	f	class:System.Reflection.Emit.OpCodes
Conv_Ovf_I4_Un	x/OpCodes.cs	/^        Conv_Ovf_I4_Un = 0x84,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Conv_Ovf_I4_Un	x/OpCodes.cs	/^        public static readonly OpCode Conv_Ovf_I4_Un = new OpCode(OpCodeValues.Conv_Ovf_I4_Un,$/;"	f	class:System.Reflection.Emit.OpCodes
Conv_Ovf_I8	x/OpCodes.cs	/^        Conv_Ovf_I8 = 0xb9,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Conv_Ovf_I8	x/OpCodes.cs	/^        public static readonly OpCode Conv_Ovf_I8 = new OpCode(OpCodeValues.Conv_Ovf_I8,$/;"	f	class:System.Reflection.Emit.OpCodes
Conv_Ovf_I8_Un	x/OpCodes.cs	/^        Conv_Ovf_I8_Un = 0x85,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Conv_Ovf_I8_Un	x/OpCodes.cs	/^        public static readonly OpCode Conv_Ovf_I8_Un = new OpCode(OpCodeValues.Conv_Ovf_I8_Un,$/;"	f	class:System.Reflection.Emit.OpCodes
Conv_Ovf_I_Un	x/OpCodes.cs	/^        Conv_Ovf_I_Un = 0x8a,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Conv_Ovf_I_Un	x/OpCodes.cs	/^        public static readonly OpCode Conv_Ovf_I_Un = new OpCode(OpCodeValues.Conv_Ovf_I_Un,$/;"	f	class:System.Reflection.Emit.OpCodes
Conv_Ovf_U	x/OpCodes.cs	/^        Conv_Ovf_U = 0xd5,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Conv_Ovf_U	x/OpCodes.cs	/^        public static readonly OpCode Conv_Ovf_U = new OpCode(OpCodeValues.Conv_Ovf_U,$/;"	f	class:System.Reflection.Emit.OpCodes
Conv_Ovf_U1	x/OpCodes.cs	/^        Conv_Ovf_U1 = 0xb4,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Conv_Ovf_U1	x/OpCodes.cs	/^        public static readonly OpCode Conv_Ovf_U1 = new OpCode(OpCodeValues.Conv_Ovf_U1,$/;"	f	class:System.Reflection.Emit.OpCodes
Conv_Ovf_U1_Un	x/OpCodes.cs	/^        Conv_Ovf_U1_Un = 0x86,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Conv_Ovf_U1_Un	x/OpCodes.cs	/^        public static readonly OpCode Conv_Ovf_U1_Un = new OpCode(OpCodeValues.Conv_Ovf_U1_Un,$/;"	f	class:System.Reflection.Emit.OpCodes
Conv_Ovf_U2	x/OpCodes.cs	/^        Conv_Ovf_U2 = 0xb6,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Conv_Ovf_U2	x/OpCodes.cs	/^        public static readonly OpCode Conv_Ovf_U2 = new OpCode(OpCodeValues.Conv_Ovf_U2,$/;"	f	class:System.Reflection.Emit.OpCodes
Conv_Ovf_U2_Un	x/OpCodes.cs	/^        Conv_Ovf_U2_Un = 0x87,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Conv_Ovf_U2_Un	x/OpCodes.cs	/^        public static readonly OpCode Conv_Ovf_U2_Un = new OpCode(OpCodeValues.Conv_Ovf_U2_Un,$/;"	f	class:System.Reflection.Emit.OpCodes
Conv_Ovf_U4	x/OpCodes.cs	/^        Conv_Ovf_U4 = 0xb8,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Conv_Ovf_U4	x/OpCodes.cs	/^        public static readonly OpCode Conv_Ovf_U4 = new OpCode(OpCodeValues.Conv_Ovf_U4,$/;"	f	class:System.Reflection.Emit.OpCodes
Conv_Ovf_U4_Un	x/OpCodes.cs	/^        Conv_Ovf_U4_Un = 0x88,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Conv_Ovf_U4_Un	x/OpCodes.cs	/^        public static readonly OpCode Conv_Ovf_U4_Un = new OpCode(OpCodeValues.Conv_Ovf_U4_Un,$/;"	f	class:System.Reflection.Emit.OpCodes
Conv_Ovf_U8	x/OpCodes.cs	/^        Conv_Ovf_U8 = 0xba,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Conv_Ovf_U8	x/OpCodes.cs	/^        public static readonly OpCode Conv_Ovf_U8 = new OpCode(OpCodeValues.Conv_Ovf_U8,$/;"	f	class:System.Reflection.Emit.OpCodes
Conv_Ovf_U8_Un	x/OpCodes.cs	/^        Conv_Ovf_U8_Un = 0x89,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Conv_Ovf_U8_Un	x/OpCodes.cs	/^        public static readonly OpCode Conv_Ovf_U8_Un = new OpCode(OpCodeValues.Conv_Ovf_U8_Un,$/;"	f	class:System.Reflection.Emit.OpCodes
Conv_Ovf_U_Un	x/OpCodes.cs	/^        Conv_Ovf_U_Un = 0x8b,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Conv_Ovf_U_Un	x/OpCodes.cs	/^        public static readonly OpCode Conv_Ovf_U_Un = new OpCode(OpCodeValues.Conv_Ovf_U_Un,$/;"	f	class:System.Reflection.Emit.OpCodes
Conv_R4	x/OpCodes.cs	/^        Conv_R4 = 0x6b,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Conv_R4	x/OpCodes.cs	/^        public static readonly OpCode Conv_R4 = new OpCode(OpCodeValues.Conv_R4,$/;"	f	class:System.Reflection.Emit.OpCodes
Conv_R8	x/OpCodes.cs	/^        Conv_R8 = 0x6c,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Conv_R8	x/OpCodes.cs	/^        public static readonly OpCode Conv_R8 = new OpCode(OpCodeValues.Conv_R8,$/;"	f	class:System.Reflection.Emit.OpCodes
Conv_R_Un	x/OpCodes.cs	/^        Conv_R_Un = 0x76,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Conv_R_Un	x/OpCodes.cs	/^        public static readonly OpCode Conv_R_Un = new OpCode(OpCodeValues.Conv_R_Un,$/;"	f	class:System.Reflection.Emit.OpCodes
Conv_U	x/OpCodes.cs	/^        Conv_U = 0xe0,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Conv_U	x/OpCodes.cs	/^        public static readonly OpCode Conv_U = new OpCode(OpCodeValues.Conv_U,$/;"	f	class:System.Reflection.Emit.OpCodes
Conv_U1	x/OpCodes.cs	/^        Conv_U1 = 0xd2,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Conv_U1	x/OpCodes.cs	/^        public static readonly OpCode Conv_U1 = new OpCode(OpCodeValues.Conv_U1,$/;"	f	class:System.Reflection.Emit.OpCodes
Conv_U2	x/OpCodes.cs	/^        Conv_U2 = 0xd1,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Conv_U2	x/OpCodes.cs	/^        public static readonly OpCode Conv_U2 = new OpCode(OpCodeValues.Conv_U2,$/;"	f	class:System.Reflection.Emit.OpCodes
Conv_U4	x/OpCodes.cs	/^        Conv_U4 = 0x6d,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Conv_U4	x/OpCodes.cs	/^        public static readonly OpCode Conv_U4 = new OpCode(OpCodeValues.Conv_U4,$/;"	f	class:System.Reflection.Emit.OpCodes
Conv_U8	x/OpCodes.cs	/^        Conv_U8 = 0x6e,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Conv_U8	x/OpCodes.cs	/^        public static readonly OpCode Conv_U8 = new OpCode(OpCodeValues.Conv_U8,$/;"	f	class:System.Reflection.Emit.OpCodes
Cpblk	x/OpCodes.cs	/^        Cpblk = 0xfe17,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Cpblk	x/OpCodes.cs	/^        public static readonly OpCode Cpblk = new OpCode(OpCodeValues.Cpblk,$/;"	f	class:System.Reflection.Emit.OpCodes
Cpobj	x/OpCodes.cs	/^        Cpobj = 0x70,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Cpobj	x/OpCodes.cs	/^        public static readonly OpCode Cpobj = new OpCode(OpCodeValues.Cpobj,$/;"	f	class:System.Reflection.Emit.OpCodes
CustomAttribute	clr.c	/^    CustomAttribute        = 0x0C,$/;"	e	enum:TableType	file:
CustomAttribute	x/clr.c	/^    CustomAttribute        = 0x0C,$/;"	e	enum:TableType	file:
CustomAttributeType	clr.c	193;"	d	file:
CustomAttributeType	x/clr.c	191;"	d	file:
DO	instruction.c	/^	Instruction_DO DO;$/;"	m	struct:I_Call	file:
DO	instruction.c	/^	Instruction_DO DO;$/;"	m	struct:I_LoadField	file:
DO	instruction.c	/^	Instruction_DO DO;$/;"	m	struct:I_SaveField	file:
DO	instruction.h	/^	Instruction_DO DO;$/;"	m	struct:Instruction
DeclSecurity	clr.c	/^    DeclSecurity           = 0x0E,$/;"	e	enum:TableType	file:
DeclSecurity	x/clr.c	/^    DeclSecurity           = 0x0E,$/;"	e	enum:TableType	file:
Div	x/OpCodes.cs	/^        Div = 0x5b,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Div	x/OpCodes.cs	/^        public static readonly OpCode Div = new OpCode(OpCodeValues.Div,$/;"	f	class:System.Reflection.Emit.OpCodes
Div_Un	x/OpCodes.cs	/^        Div_Un = 0x5c,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Div_Un	x/OpCodes.cs	/^        public static readonly OpCode Div_Un = new OpCode(OpCodeValues.Div_Un,$/;"	f	class:System.Reflection.Emit.OpCodes
DllCharacteristics	header_pe.h	/^    uint16_t DllCharacteristics;  \/\/ For more information, see DLL Characteristics later in this specification.$/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32
DllCharacteristics	header_pe.h	/^    uint16_t DllCharacteristics;  \/\/ For more information, see DLL Characteristics later in this specification.$/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32Plus
Double	value.h	/^		double Double;$/;"	m	union:Value::__anon1
Dup	x/OpCodes.cs	/^        Dup = 0x25,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Dup	x/OpCodes.cs	/^        public static readonly OpCode Dup = new OpCode(OpCodeValues.Dup,$/;"	f	class:System.Reflection.Emit.OpCodes
Endfilter	x/OpCodes.cs	/^        Endfilter = 0xfe11,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Endfilter	x/OpCodes.cs	/^        public static readonly OpCode Endfilter = new OpCode(OpCodeValues.Endfilter,$/;"	f	class:System.Reflection.Emit.OpCodes
Endfinally	x/OpCodes.cs	/^        Endfinally = 0xdc,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Endfinally	x/OpCodes.cs	/^        public static readonly OpCode Endfinally = new OpCode(OpCodeValues.Endfinally,$/;"	f	class:System.Reflection.Emit.OpCodes
EntryPointToken	header_clr.h	/^    uint32_t EntryPointToken; \/\/ Token for the MethodDef or File of the entry point for the image$/;"	m	struct:TCLRHeader
EntryPointToken	x/header_clr.h	/^    uint32_t EntryPointToken; \/\/ Token for the MethodDef or File of the entry point for the image$/;"	m	struct:TCLRHeader
Event	clr.c	/^    Event                  = 0x14,$/;"	e	enum:TableType	file:
Event	x/clr.c	/^    Event                  = 0x14,$/;"	e	enum:TableType	file:
EventMap	clr.c	/^    EventMap               = 0x12,$/;"	e	enum:TableType	file:
EventMap	x/clr.c	/^    EventMap               = 0x12,$/;"	e	enum:TableType	file:
ExportAddressTableJumps	header_clr.h	/^    uint64_t ExportAddressTableJumps; \/\/  Always 0 (§II.24.1).$/;"	m	struct:TCLRHeader
ExportAddressTableJumps	x/header_clr.h	/^    uint64_t ExportAddressTableJumps; \/\/  Always 0 (§II.24.1).$/;"	m	struct:TCLRHeader
ExportedType	clr.c	/^    ExportedType           = 0x27,$/;"	e	enum:TableType	file:
ExportedType	x/clr.c	/^    ExportedType           = 0x27,$/;"	e	enum:TableType	file:
F	clr.c	198;"	d	file:
F	clr.c	246;"	d	file:
F	x/clr.c	196;"	d	file:
F	x/clr.c	244;"	d	file:
Field	clr.c	/^    Field                  = 0x04,$/;"	e	enum:TableType	file:
Field	value.h	/^struct Field {$/;"	s
Field	x/clr.c	/^    Field                  = 0x04,$/;"	e	enum:TableType	file:
FieldInfo	table.h	/^struct FieldInfo {$/;"	s
FieldLayout	clr.c	/^    FieldLayout            = 0x10,$/;"	e	enum:TableType	file:
FieldLayout	x/clr.c	/^    FieldLayout            = 0x10,$/;"	e	enum:TableType	file:
FieldMarshal	clr.c	/^    FieldMarshal           = 0x0D,$/;"	e	enum:TableType	file:
FieldMarshal	x/clr.c	/^    FieldMarshal           = 0x0D,$/;"	e	enum:TableType	file:
FieldRVA	clr.c	/^    FieldRVA               = 0x1D,$/;"	e	enum:TableType	file:
FieldRVA	x/clr.c	/^    FieldRVA               = 0x1D,$/;"	e	enum:TableType	file:
File	clr.c	/^    File                   = 0x26,$/;"	e	enum:TableType	file:
File	x/clr.c	/^    File                   = 0x26,$/;"	e	enum:TableType	file:
FileAlignment	header_pe.h	/^    uint32_t FileAlignment; \/\/ The alignment factor (in bytes) that is used to align the raw data of sections in the image file. $/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32
FileAlignment	header_pe.h	/^    uint32_t FileAlignment; \/\/ The alignment factor (in bytes) that is used to align the raw data of sections in the image file. $/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32Plus
Flags	header_clr.h	/^	uint16_t Flags; \/\/ Reserved, always 0 (§II.24.1).$/;"	m	struct:TMetadataRoot_P2
Flags	header_clr.h	/^    uint32_t Flags; \/\/ Flags describing this runtime image. (§II.25.3.3.1).$/;"	m	struct:TCLRHeader
Flags	x/header_clr.h	/^	uint16_t Flags; \/\/ Reserved, always 0 (§II.24.1).$/;"	m	struct:TMetadataRoot_P2
Flags	x/header_clr.h	/^    uint32_t Flags; \/\/ Flags describing this runtime image. (§II.25.3.3.1).$/;"	m	struct:TCLRHeader
Float	value.h	/^		float Float;$/;"	m	union:Value::__anon1
FlowControl	x/FlowControl.cs	/^    public enum FlowControl$/;"	g	namespace:System.Reflection.Emit
G	clr.c	200;"	d	file:
G	clr.c	248;"	d	file:
G	x/clr.c	198;"	d	file:
G	x/clr.c	246;"	d	file:
GenericParam	clr.c	/^    GenericParam           = 0x2A,$/;"	e	enum:TableType	file:
GenericParam	x/clr.c	/^    GenericParam           = 0x2A,$/;"	e	enum:TableType	file:
GenericParamConstraint	clr.c	/^    GenericParamConstraint = 0x2C,$/;"	e	enum:TableType	file:
GenericParamConstraint	x/clr.c	/^    GenericParamConstraint = 0x2C,$/;"	e	enum:TableType	file:
HasConstant	clr.c	185;"	d	file:
HasConstant	x/clr.c	183;"	d	file:
HasCustomAttribute	clr.c	179;"	d	file:
HasCustomAttribute	x/clr.c	177;"	d	file:
HasDeclSecurity	clr.c	187;"	d	file:
HasDeclSecurity	x/clr.c	185;"	d	file:
HasFieldMarshall	clr.c	186;"	d	file:
HasFieldMarshall	x/clr.c	184;"	d	file:
HasSemantics	clr.c	189;"	d	file:
HasSemantics	x/clr.c	187;"	d	file:
HeapSizes	header_clr.h	/^    int HeapSizes;$/;"	m	struct:Context
HeapSizes	header_clr.h	/^    uint8_t HeapSizes; \/\/ Bit vector for heap sizes.$/;"	m	struct:TMetadataTableHeader
HeapSizes	x/header_clr.h	/^    int HeapSizes;$/;"	m	struct:Context
HeapSizes	x/header_clr.h	/^    uint8_t HeapSizes; \/\/ Bit vector for heap sizes.$/;"	m	struct:TMetadataTableHeader
I	clr.c	202;"	d	file:
I	clr.c	250;"	d	file:
I	x/clr.c	200;"	d	file:
I	x/clr.c	248;"	d	file:
IMAGE_DATA_DIRECTORY	header_pe.h	/^	struct TIMAGE_DATA_DIRECTORY * IMAGE_DATA_DIRECTORY;$/;"	m	struct:PEFile	typeref:struct:PEFile::TIMAGE_DATA_DIRECTORY
I_Call	instruction.c	/^struct I_Call {$/;"	s	file:
I_Call_DO	instruction.c	/^static void I_Call_DO(struct Instruction * _instruction, int pc, struct MethodBody * body) { $/;"	f	file:
I_LoadField	instruction.c	/^struct I_LoadField {$/;"	s	file:
I_LoadField_DO	instruction.c	/^static void I_LoadField_DO(struct Instruction * _instruction, int pc, struct MethodBody * body) { $/;"	f	file:
I_SaveField	instruction.c	/^struct I_SaveField {$/;"	s	file:
I_SaveField_DO	instruction.c	/^static void I_SaveField_DO(struct Instruction * _instruction, int pc, struct MethodBody * body) { $/;"	f	file:
ImageBase	header_pe.h	/^    uint32_t ImageBase; \/\/ The preferred address of the first byte of image when loaded into memory; must be a multiple of 64 K.$/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32
ImageBase	header_pe.h	/^    uint64_t ImageBase; \/\/ The preferred address of the first byte of image when loaded into memory; must be a multiple of 64 K.$/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32Plus
ImplMap	clr.c	/^    ImplMap                = 0x1C,$/;"	e	enum:TableType	file:
ImplMap	x/clr.c	/^    ImplMap                = 0x1C,$/;"	e	enum:TableType	file:
Implementation	clr.c	192;"	d	file:
Implementation	x/clr.c	190;"	d	file:
Initblk	x/OpCodes.cs	/^        Initblk = 0xfe18,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Initblk	x/OpCodes.cs	/^        public static readonly OpCode Initblk = new OpCode(OpCodeValues.Initblk,$/;"	f	class:System.Reflection.Emit.OpCodes
Initobj	x/OpCodes.cs	/^        Initobj = 0xfe15,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Initobj	x/OpCodes.cs	/^        public static readonly OpCode Initobj = new OpCode(OpCodeValues.Initobj,$/;"	f	class:System.Reflection.Emit.OpCodes
InlineBrTarget	opcode.c	/^    InlineBrTarget = 0, \/\/ The operand is a 32-bit integer branch target.$/;"	e	enum:OperandParams	file:
InlineBrTarget	x/OperandType.cs	/^        InlineBrTarget = 0,$/;"	e	enum:System.Reflection.Emit.OperandType	file:
InlineField	opcode.c	/^    InlineField = 1,    \/\/ The operand is a 32-bit metadata token.$/;"	e	enum:OperandParams	file:
InlineField	x/OperandType.cs	/^        InlineField = 1,$/;"	e	enum:System.Reflection.Emit.OperandType	file:
InlineI	opcode.c	/^    InlineI = 2,        \/\/ The operand is a 32-bit integer.$/;"	e	enum:OperandParams	file:
InlineI	x/OperandType.cs	/^        InlineI = 2,$/;"	e	enum:System.Reflection.Emit.OperandType	file:
InlineI8	opcode.c	/^	InlineI8 = 3,       \/\/ The operand is a 64-bit integer.$/;"	e	enum:OperandParams	file:
InlineI8	x/OperandType.cs	/^        InlineI8 = 3,$/;"	e	enum:System.Reflection.Emit.OperandType	file:
InlineMethod	opcode.c	/^    InlineMethod = 4,   \/\/ The operand is a 32-bit metadata token.$/;"	e	enum:OperandParams	file:
InlineMethod	x/OperandType.cs	/^        InlineMethod = 4,$/;"	e	enum:System.Reflection.Emit.OperandType	file:
InlineNone	opcode.c	/^    InlineNone = 5,     \/\/ No operand.$/;"	e	enum:OperandParams	file:
InlineNone	x/OperandType.cs	/^        InlineNone = 5,$/;"	e	enum:System.Reflection.Emit.OperandType	file:
InlinePhi	opcode.c	/^    InlinePhi = 6,      \/\/ The operand is reserved and should not be used.$/;"	e	enum:OperandParams	file:
InlinePhi	x/OperandType.cs	/^        InlinePhi = 6,$/;"	e	enum:System.Reflection.Emit.OperandType	file:
InlineR	opcode.c	/^    InlineR = 7,        \/\/ The operand is a 64-bit IEEE floating point number.$/;"	e	enum:OperandParams	file:
InlineR	x/OperandType.cs	/^        InlineR = 7,$/;"	e	enum:System.Reflection.Emit.OperandType	file:
InlineSig	opcode.c	/^    InlineSig = 9,      \/\/ The operand is a 32-bit metadata signature token.$/;"	e	enum:OperandParams	file:
InlineSig	x/OperandType.cs	/^        InlineSig = 9,$/;"	e	enum:System.Reflection.Emit.OperandType	file:
InlineString	opcode.c	/^    InlineString = 10,  \/\/ The operand is a 32-bit metadata string token.$/;"	e	enum:OperandParams	file:
InlineString	x/OperandType.cs	/^        InlineString = 10,$/;"	e	enum:System.Reflection.Emit.OperandType	file:
InlineSwitch	opcode.c	/^    InlineSwitch = 11,  \/\/ The operand is the 32-bit integer argument to a switch instruction.$/;"	e	enum:OperandParams	file:
InlineSwitch	x/OperandType.cs	/^        InlineSwitch = 11,$/;"	e	enum:System.Reflection.Emit.OperandType	file:
InlineTok	opcode.c	/^    InlineTok = 12,     \/\/ The operand is a FieldRef, MethodRef, or TypeRef token.$/;"	e	enum:OperandParams	file:
InlineTok	x/OperandType.cs	/^        InlineTok = 12,$/;"	e	enum:System.Reflection.Emit.OperandType	file:
InlineType	opcode.c	/^    InlineType = 13,    \/\/ The operand is a 32-bit metadata token.$/;"	e	enum:OperandParams	file:
InlineType	x/OperandType.cs	/^        InlineType = 13,$/;"	e	enum:System.Reflection.Emit.OperandType	file:
InlineVar	opcode.c	/^    InlineVar = 14,     \/\/ The operand is 16-bit integer containing the ordinal of a local variable or an argument.$/;"	e	enum:OperandParams	file:
InlineVar	x/OperandType.cs	/^        InlineVar = 14,$/;"	e	enum:System.Reflection.Emit.OperandType	file:
Instruction	instruction.h	/^struct Instruction {$/;"	s
Instruction_DO	instruction.h	/^typedef void (*Instruction_DO)(struct Instruction * instruction, int pc, struct MethodBody * body);$/;"	t
Int	value.h	/^		int Int;$/;"	m	union:Value::__anon1
InterfaceImpl	clr.c	/^    InterfaceImpl          = 0x09,$/;"	e	enum:TableType	file:
InterfaceImpl	x/clr.c	/^    InterfaceImpl          = 0x09,$/;"	e	enum:TableType	file:
Isinst	x/OpCodes.cs	/^        Isinst = 0x75,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Isinst	x/OpCodes.cs	/^        public static readonly OpCode Isinst = new OpCode(OpCodeValues.Isinst,$/;"	f	class:System.Reflection.Emit.OpCodes
Jmp	x/OpCodes.cs	/^        Jmp = 0x27,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Jmp	x/OpCodes.cs	/^        public static readonly OpCode Jmp = new OpCode(OpCodeValues.Jmp,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldarg	x/OpCodes.cs	/^        Ldarg = 0xfe09,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldarg	x/OpCodes.cs	/^        public static readonly OpCode Ldarg = new OpCode(OpCodeValues.Ldarg,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldarg_0	x/OpCodes.cs	/^        Ldarg_0 = 0x02,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldarg_0	x/OpCodes.cs	/^        public static readonly OpCode Ldarg_0 = new OpCode(OpCodeValues.Ldarg_0,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldarg_1	x/OpCodes.cs	/^        Ldarg_1 = 0x03,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldarg_1	x/OpCodes.cs	/^        public static readonly OpCode Ldarg_1 = new OpCode(OpCodeValues.Ldarg_1,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldarg_2	x/OpCodes.cs	/^        Ldarg_2 = 0x04,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldarg_2	x/OpCodes.cs	/^        public static readonly OpCode Ldarg_2 = new OpCode(OpCodeValues.Ldarg_2,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldarg_3	x/OpCodes.cs	/^        Ldarg_3 = 0x05,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldarg_3	x/OpCodes.cs	/^        public static readonly OpCode Ldarg_3 = new OpCode(OpCodeValues.Ldarg_3,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldarg_S	x/OpCodes.cs	/^        Ldarg_S = 0x0e,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldarg_S	x/OpCodes.cs	/^        public static readonly OpCode Ldarg_S = new OpCode(OpCodeValues.Ldarg_S,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldarga	x/OpCodes.cs	/^        Ldarga = 0xfe0a,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldarga	x/OpCodes.cs	/^        public static readonly OpCode Ldarga = new OpCode(OpCodeValues.Ldarga,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldarga_S	x/OpCodes.cs	/^        Ldarga_S = 0x0f,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldarga_S	x/OpCodes.cs	/^        public static readonly OpCode Ldarga_S = new OpCode(OpCodeValues.Ldarga_S,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldc_I4	x/OpCodes.cs	/^        Ldc_I4 = 0x20,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldc_I4	x/OpCodes.cs	/^        public static readonly OpCode Ldc_I4 = new OpCode(OpCodeValues.Ldc_I4,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldc_I4_0	x/OpCodes.cs	/^        Ldc_I4_0 = 0x16,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldc_I4_0	x/OpCodes.cs	/^        public static readonly OpCode Ldc_I4_0 = new OpCode(OpCodeValues.Ldc_I4_0,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldc_I4_1	x/OpCodes.cs	/^        Ldc_I4_1 = 0x17,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldc_I4_1	x/OpCodes.cs	/^        public static readonly OpCode Ldc_I4_1 = new OpCode(OpCodeValues.Ldc_I4_1,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldc_I4_2	x/OpCodes.cs	/^        Ldc_I4_2 = 0x18,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldc_I4_2	x/OpCodes.cs	/^        public static readonly OpCode Ldc_I4_2 = new OpCode(OpCodeValues.Ldc_I4_2,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldc_I4_3	x/OpCodes.cs	/^        Ldc_I4_3 = 0x19,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldc_I4_3	x/OpCodes.cs	/^        public static readonly OpCode Ldc_I4_3 = new OpCode(OpCodeValues.Ldc_I4_3,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldc_I4_4	x/OpCodes.cs	/^        Ldc_I4_4 = 0x1a,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldc_I4_4	x/OpCodes.cs	/^        public static readonly OpCode Ldc_I4_4 = new OpCode(OpCodeValues.Ldc_I4_4,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldc_I4_5	x/OpCodes.cs	/^        Ldc_I4_5 = 0x1b,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldc_I4_5	x/OpCodes.cs	/^        public static readonly OpCode Ldc_I4_5 = new OpCode(OpCodeValues.Ldc_I4_5,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldc_I4_6	x/OpCodes.cs	/^        Ldc_I4_6 = 0x1c,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldc_I4_6	x/OpCodes.cs	/^        public static readonly OpCode Ldc_I4_6 = new OpCode(OpCodeValues.Ldc_I4_6,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldc_I4_7	x/OpCodes.cs	/^        Ldc_I4_7 = 0x1d,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldc_I4_7	x/OpCodes.cs	/^        public static readonly OpCode Ldc_I4_7 = new OpCode(OpCodeValues.Ldc_I4_7,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldc_I4_8	x/OpCodes.cs	/^        Ldc_I4_8 = 0x1e,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldc_I4_8	x/OpCodes.cs	/^        public static readonly OpCode Ldc_I4_8 = new OpCode(OpCodeValues.Ldc_I4_8,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldc_I4_M1	x/OpCodes.cs	/^        Ldc_I4_M1 = 0x15,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldc_I4_M1	x/OpCodes.cs	/^        public static readonly OpCode Ldc_I4_M1 = new OpCode(OpCodeValues.Ldc_I4_M1,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldc_I4_S	x/OpCodes.cs	/^        Ldc_I4_S = 0x1f,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldc_I4_S	x/OpCodes.cs	/^        public static readonly OpCode Ldc_I4_S = new OpCode(OpCodeValues.Ldc_I4_S,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldc_I8	x/OpCodes.cs	/^        Ldc_I8 = 0x21,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldc_I8	x/OpCodes.cs	/^        public static readonly OpCode Ldc_I8 = new OpCode(OpCodeValues.Ldc_I8,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldc_R4	x/OpCodes.cs	/^        Ldc_R4 = 0x22,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldc_R4	x/OpCodes.cs	/^        public static readonly OpCode Ldc_R4 = new OpCode(OpCodeValues.Ldc_R4,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldc_R8	x/OpCodes.cs	/^        Ldc_R8 = 0x23,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldc_R8	x/OpCodes.cs	/^        public static readonly OpCode Ldc_R8 = new OpCode(OpCodeValues.Ldc_R8,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldelem	x/OpCodes.cs	/^        Ldelem = 0xa3,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldelem	x/OpCodes.cs	/^        public static readonly OpCode Ldelem = new OpCode(OpCodeValues.Ldelem,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldelem_I	x/OpCodes.cs	/^        Ldelem_I = 0x97,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldelem_I	x/OpCodes.cs	/^        public static readonly OpCode Ldelem_I = new OpCode(OpCodeValues.Ldelem_I,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldelem_I1	x/OpCodes.cs	/^        Ldelem_I1 = 0x90,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldelem_I1	x/OpCodes.cs	/^        public static readonly OpCode Ldelem_I1 = new OpCode(OpCodeValues.Ldelem_I1,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldelem_I2	x/OpCodes.cs	/^        Ldelem_I2 = 0x92,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldelem_I2	x/OpCodes.cs	/^        public static readonly OpCode Ldelem_I2 = new OpCode(OpCodeValues.Ldelem_I2,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldelem_I4	x/OpCodes.cs	/^        Ldelem_I4 = 0x94,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldelem_I4	x/OpCodes.cs	/^        public static readonly OpCode Ldelem_I4 = new OpCode(OpCodeValues.Ldelem_I4,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldelem_I8	x/OpCodes.cs	/^        Ldelem_I8 = 0x96,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldelem_I8	x/OpCodes.cs	/^        public static readonly OpCode Ldelem_I8 = new OpCode(OpCodeValues.Ldelem_I8,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldelem_R4	x/OpCodes.cs	/^        Ldelem_R4 = 0x98,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldelem_R4	x/OpCodes.cs	/^        public static readonly OpCode Ldelem_R4 = new OpCode(OpCodeValues.Ldelem_R4,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldelem_R8	x/OpCodes.cs	/^        Ldelem_R8 = 0x99,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldelem_R8	x/OpCodes.cs	/^        public static readonly OpCode Ldelem_R8 = new OpCode(OpCodeValues.Ldelem_R8,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldelem_Ref	x/OpCodes.cs	/^        Ldelem_Ref = 0x9a,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldelem_Ref	x/OpCodes.cs	/^        public static readonly OpCode Ldelem_Ref = new OpCode(OpCodeValues.Ldelem_Ref,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldelem_U1	x/OpCodes.cs	/^        Ldelem_U1 = 0x91,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldelem_U1	x/OpCodes.cs	/^        public static readonly OpCode Ldelem_U1 = new OpCode(OpCodeValues.Ldelem_U1,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldelem_U2	x/OpCodes.cs	/^        Ldelem_U2 = 0x93,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldelem_U2	x/OpCodes.cs	/^        public static readonly OpCode Ldelem_U2 = new OpCode(OpCodeValues.Ldelem_U2,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldelem_U4	x/OpCodes.cs	/^        Ldelem_U4 = 0x95,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldelem_U4	x/OpCodes.cs	/^        public static readonly OpCode Ldelem_U4 = new OpCode(OpCodeValues.Ldelem_U4,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldelema	x/OpCodes.cs	/^        Ldelema = 0x8f,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldelema	x/OpCodes.cs	/^        public static readonly OpCode Ldelema = new OpCode(OpCodeValues.Ldelema,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldfld	x/OpCodes.cs	/^        Ldfld = 0x7b,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldfld	x/OpCodes.cs	/^        public static readonly OpCode Ldfld = new OpCode(OpCodeValues.Ldfld,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldflda	x/OpCodes.cs	/^        Ldflda = 0x7c,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldflda	x/OpCodes.cs	/^        public static readonly OpCode Ldflda = new OpCode(OpCodeValues.Ldflda,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldftn	x/OpCodes.cs	/^        Ldftn = 0xfe06,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldftn	x/OpCodes.cs	/^        public static readonly OpCode Ldftn = new OpCode(OpCodeValues.Ldftn,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldind_I	x/OpCodes.cs	/^        Ldind_I = 0x4d,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldind_I	x/OpCodes.cs	/^        public static readonly OpCode Ldind_I = new OpCode(OpCodeValues.Ldind_I,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldind_I1	x/OpCodes.cs	/^        Ldind_I1 = 0x46,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldind_I1	x/OpCodes.cs	/^        public static readonly OpCode Ldind_I1 = new OpCode(OpCodeValues.Ldind_I1,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldind_I2	x/OpCodes.cs	/^        Ldind_I2 = 0x48,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldind_I2	x/OpCodes.cs	/^        public static readonly OpCode Ldind_I2 = new OpCode(OpCodeValues.Ldind_I2,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldind_I4	x/OpCodes.cs	/^        Ldind_I4 = 0x4a,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldind_I4	x/OpCodes.cs	/^        public static readonly OpCode Ldind_I4 = new OpCode(OpCodeValues.Ldind_I4,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldind_I8	x/OpCodes.cs	/^        Ldind_I8 = 0x4c,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldind_I8	x/OpCodes.cs	/^        public static readonly OpCode Ldind_I8 = new OpCode(OpCodeValues.Ldind_I8,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldind_R4	x/OpCodes.cs	/^        Ldind_R4 = 0x4e,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldind_R4	x/OpCodes.cs	/^        public static readonly OpCode Ldind_R4 = new OpCode(OpCodeValues.Ldind_R4,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldind_R8	x/OpCodes.cs	/^        Ldind_R8 = 0x4f,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldind_R8	x/OpCodes.cs	/^        public static readonly OpCode Ldind_R8 = new OpCode(OpCodeValues.Ldind_R8,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldind_Ref	x/OpCodes.cs	/^        Ldind_Ref = 0x50,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldind_Ref	x/OpCodes.cs	/^        public static readonly OpCode Ldind_Ref = new OpCode(OpCodeValues.Ldind_Ref,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldind_U1	x/OpCodes.cs	/^        Ldind_U1 = 0x47,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldind_U1	x/OpCodes.cs	/^        public static readonly OpCode Ldind_U1 = new OpCode(OpCodeValues.Ldind_U1,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldind_U2	x/OpCodes.cs	/^        Ldind_U2 = 0x49,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldind_U2	x/OpCodes.cs	/^        public static readonly OpCode Ldind_U2 = new OpCode(OpCodeValues.Ldind_U2,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldind_U4	x/OpCodes.cs	/^        Ldind_U4 = 0x4b,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldind_U4	x/OpCodes.cs	/^        public static readonly OpCode Ldind_U4 = new OpCode(OpCodeValues.Ldind_U4,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldlen	x/OpCodes.cs	/^        Ldlen = 0x8e,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldlen	x/OpCodes.cs	/^        public static readonly OpCode Ldlen = new OpCode(OpCodeValues.Ldlen,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldloc	x/OpCodes.cs	/^        Ldloc = 0xfe0c,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldloc	x/OpCodes.cs	/^        public static readonly OpCode Ldloc = new OpCode(OpCodeValues.Ldloc,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldloc_0	x/OpCodes.cs	/^        Ldloc_0 = 0x06,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldloc_0	x/OpCodes.cs	/^        public static readonly OpCode Ldloc_0 = new OpCode(OpCodeValues.Ldloc_0,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldloc_1	x/OpCodes.cs	/^        Ldloc_1 = 0x07,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldloc_1	x/OpCodes.cs	/^        public static readonly OpCode Ldloc_1 = new OpCode(OpCodeValues.Ldloc_1,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldloc_2	x/OpCodes.cs	/^        Ldloc_2 = 0x08,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldloc_2	x/OpCodes.cs	/^        public static readonly OpCode Ldloc_2 = new OpCode(OpCodeValues.Ldloc_2,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldloc_3	x/OpCodes.cs	/^        Ldloc_3 = 0x09,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldloc_3	x/OpCodes.cs	/^        public static readonly OpCode Ldloc_3 = new OpCode(OpCodeValues.Ldloc_3,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldloc_S	x/OpCodes.cs	/^        Ldloc_S = 0x11,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldloc_S	x/OpCodes.cs	/^        public static readonly OpCode Ldloc_S = new OpCode(OpCodeValues.Ldloc_S,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldloca	x/OpCodes.cs	/^        Ldloca = 0xfe0d,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldloca	x/OpCodes.cs	/^        public static readonly OpCode Ldloca = new OpCode(OpCodeValues.Ldloca,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldloca_S	x/OpCodes.cs	/^        Ldloca_S = 0x12,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldloca_S	x/OpCodes.cs	/^        public static readonly OpCode Ldloca_S = new OpCode(OpCodeValues.Ldloca_S,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldnull	x/OpCodes.cs	/^        Ldnull = 0x14,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldnull	x/OpCodes.cs	/^        public static readonly OpCode Ldnull = new OpCode(OpCodeValues.Ldnull,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldobj	x/OpCodes.cs	/^        Ldobj = 0x71,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldobj	x/OpCodes.cs	/^        public static readonly OpCode Ldobj = new OpCode(OpCodeValues.Ldobj,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldsfld	x/OpCodes.cs	/^        Ldsfld = 0x7e,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldsfld	x/OpCodes.cs	/^        public static readonly OpCode Ldsfld = new OpCode(OpCodeValues.Ldsfld,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldsflda	x/OpCodes.cs	/^        Ldsflda = 0x7f,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldsflda	x/OpCodes.cs	/^        public static readonly OpCode Ldsflda = new OpCode(OpCodeValues.Ldsflda,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldstr	x/OpCodes.cs	/^        Ldstr = 0x72,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldstr	x/OpCodes.cs	/^        public static readonly OpCode Ldstr = new OpCode(OpCodeValues.Ldstr,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldtoken	x/OpCodes.cs	/^        Ldtoken = 0xd0,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldtoken	x/OpCodes.cs	/^        public static readonly OpCode Ldtoken = new OpCode(OpCodeValues.Ldtoken,$/;"	f	class:System.Reflection.Emit.OpCodes
Ldvirtftn	x/OpCodes.cs	/^        Ldvirtftn = 0xfe07,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ldvirtftn	x/OpCodes.cs	/^        public static readonly OpCode Ldvirtftn = new OpCode(OpCodeValues.Ldvirtftn,$/;"	f	class:System.Reflection.Emit.OpCodes
Leave	x/OpCodes.cs	/^        Leave = 0xdd,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Leave	x/OpCodes.cs	/^        public static readonly OpCode Leave = new OpCode(OpCodeValues.Leave,$/;"	f	class:System.Reflection.Emit.OpCodes
Leave_S	x/OpCodes.cs	/^        Leave_S = 0xde,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Leave_S	x/OpCodes.cs	/^        public static readonly OpCode Leave_S = new OpCode(OpCodeValues.Leave_S,$/;"	f	class:System.Reflection.Emit.OpCodes
Length	header_clr.h	/^    uint32_t Length;        \/\/ Number of bytes allocated to hold version string (including null terminator), call this x.$/;"	m	struct:TMetadataRoot_P1
Length	x/header_clr.h	/^    uint32_t Length;        \/\/ Number of bytes allocated to hold version string (including null terminator), call this x.$/;"	m	struct:TMetadataRoot_P1
LoaderFlags	header_pe.h	/^    uint32_t LoaderFlags;         \/\/ Reserved, must be zero.$/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32
LoaderFlags	header_pe.h	/^    uint32_t LoaderFlags;         \/\/ Reserved, must be zero.$/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32Plus
Localloc	x/OpCodes.cs	/^        Localloc = 0xfe0f,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Localloc	x/OpCodes.cs	/^        public static readonly OpCode Localloc = new OpCode(OpCodeValues.Localloc,$/;"	f	class:System.Reflection.Emit.OpCodes
Long	value.h	/^		long Long;$/;"	m	union:Value::__anon1
MOOT	opcode.c	23;"	d	file:
Machine	header_pe.h	/^    uint16_t Machine;                \/\/ The number that identifies the type of target machine. For more information, see Machine Types.$/;"	m	struct:TCOFFFileHeader
Macro	x/OpCodeType.cs	/^        Macro = 1,$/;"	e	enum:System.Reflection.Emit.OpCodeType	file:
Magic	header_pe.h	/^    uint16_t Magic;                    \/\/ The unsigned integer that identifies the state of the image file.$/;"	m	struct:TOptionalHeaderStandardFields_PE32
Magic	header_pe.h	/^    uint16_t Magic;                    \/\/ The unsigned integer that identifies the state of the image file.$/;"	m	struct:TOptionalHeaderStandardFields_PE32Plus
MajorImageVersion	header_pe.h	/^    uint16_t MajorImageVersion; \/\/ The major version number of the image.$/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32
MajorImageVersion	header_pe.h	/^    uint16_t MajorImageVersion; \/\/ The major version number of the image.$/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32Plus
MajorLinkerVersion	header_pe.h	/^    uint8_t MajorLinkerVersion;        \/\/ The linker major version number.$/;"	m	struct:TOptionalHeaderStandardFields_PE32
MajorLinkerVersion	header_pe.h	/^    uint8_t MajorLinkerVersion;        \/\/ The linker major version number.$/;"	m	struct:TOptionalHeaderStandardFields_PE32Plus
MajorOperatingSystemVersion	header_pe.h	/^    uint16_t MajorOperatingSystemVersion; \/\/ The major version number of the required operating system.$/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32
MajorOperatingSystemVersion	header_pe.h	/^    uint16_t MajorOperatingSystemVersion; \/\/ The major version number of the required operating system.$/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32Plus
MajorRuntimeVersion	header_clr.h	/^    uint16_t MajorRuntimeVersion; \/\/ The minimum version of the runtime required to run this program, currently 2.$/;"	m	struct:TCLRHeader
MajorRuntimeVersion	x/header_clr.h	/^    uint16_t MajorRuntimeVersion; \/\/ The minimum version of the runtime required to run this program, currently 2.$/;"	m	struct:TCLRHeader
MajorSubsystemVersion	header_pe.h	/^    uint16_t MajorSubsystemVersion; \/\/ The major version number of the subsystem.$/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32
MajorSubsystemVersion	header_pe.h	/^    uint16_t MajorSubsystemVersion; \/\/ The major version number of the subsystem.$/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32Plus
MajorVersion	header_clr.h	/^    uint16_t MajorVersion;  \/\/ Major version, 1 (ignore on read)$/;"	m	struct:TMetadataRoot_P1
MajorVersion	header_clr.h	/^    uint8_t MajorVersion; \/\/ Major version of table schemata; shall be 2 (§II.24.1).$/;"	m	struct:TMetadataTableHeader
MajorVersion	x/header_clr.h	/^    uint16_t MajorVersion;  \/\/ Major version, 1 (ignore on read)$/;"	m	struct:TMetadataRoot_P1
MajorVersion	x/header_clr.h	/^    uint8_t MajorVersion; \/\/ Major version of table schemata; shall be 2 (§II.24.1).$/;"	m	struct:TMetadataTableHeader
ManagedNativeHeader	header_clr.h	/^    uint64_t ManagedNativeHeader; \/\/ Always 0 (§II.24.1)$/;"	m	struct:TCLRHeader
ManagedNativeHeader	x/header_clr.h	/^    uint64_t ManagedNativeHeader; \/\/ Always 0 (§II.24.1)$/;"	m	struct:TCLRHeader
ManifestResource	clr.c	/^    ManifestResource       = 0x28,$/;"	e	enum:TableType	file:
ManifestResource	x/clr.c	/^    ManifestResource       = 0x28,$/;"	e	enum:TableType	file:
MemberForwarded	clr.c	191;"	d	file:
MemberForwarded	x/clr.c	189;"	d	file:
MemberRef	clr.c	/^    MemberRef              = 0x0A,$/;"	e	enum:TableType	file:
MemberRef	x/clr.c	/^    MemberRef              = 0x0A,$/;"	e	enum:TableType	file:
MemberRefParent	clr.c	188;"	d	file:
MemberRefParent	x/clr.c	186;"	d	file:
Meta	x/FlowControl.cs	/^        Meta = 4,$/;"	e	enum:System.Reflection.Emit.FlowControl	file:
MetaDataSize	header_clr.h	/^    uint32_t MetaDataSize;           \/\/ RVA and size of the physical metadata (§II.24).$/;"	m	struct:TCLRHeader
MetaDataSize	x/header_clr.h	/^    uint32_t MetaDataSize;           \/\/ RVA and size of the physical metadata (§II.24).$/;"	m	struct:TCLRHeader
MetaDataVirtualAddress	header_clr.h	/^    uint32_t MetaDataVirtualAddress; \/\/ RVA and size of the physical metadata (§II.24).$/;"	m	struct:TCLRHeader
MetaDataVirtualAddress	x/header_clr.h	/^    uint32_t MetaDataVirtualAddress; \/\/ RVA and size of the physical metadata (§II.24).$/;"	m	struct:TCLRHeader
MethodBody	method_body.h	/^struct MethodBody {$/;"	s
MethodBody_Init	method_body.c	/^void MethodBody_Init(struct MethodBody * body, struct Instruction * instructions)$/;"	f
MethodBody_Invoke	method_body.c	/^void MethodBody_Invoke(struct MethodBody * body)$/;"	f
MethodBody_IsFinished	method_body.c	/^int MethodBody_IsFinished(struct MethodBody * body)$/;"	f
MethodBody_Jump	method_body.c	/^void MethodBody_Jump(struct MethodBody * body, int pc)$/;"	f
MethodBody_Release	method_body.c	/^void MethodBody_Release(struct MethodBody * body)$/;"	f
MethodDef	clr.c	/^    MethodDef              = 0x06,$/;"	e	enum:TableType	file:
MethodDef	x/clr.c	/^    MethodDef              = 0x06,$/;"	e	enum:TableType	file:
MethodDefOrRef	clr.c	190;"	d	file:
MethodDefOrRef	x/clr.c	188;"	d	file:
MethodImpl	clr.c	/^    MethodImpl             = 0x19,$/;"	e	enum:TableType	file:
MethodImpl	x/clr.c	/^    MethodImpl             = 0x19,$/;"	e	enum:TableType	file:
MethodSemantics	clr.c	/^    Property               = 0x17, MethodSemantics        = 0x18,$/;"	e	enum:TableType	file:
MethodSemantics	x/clr.c	/^    MethodSemantics        = 0x18,$/;"	e	enum:TableType	file:
MethodSpec	clr.c	/^    MethodSpec             = 0x2B,$/;"	e	enum:TableType	file:
MethodSpec	x/clr.c	/^    MethodSpec             = 0x2B,$/;"	e	enum:TableType	file:
MinorImageVersion	header_pe.h	/^    uint16_t MinorImageVersion; \/\/ The minor version number of the image.$/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32
MinorImageVersion	header_pe.h	/^    uint16_t MinorImageVersion; \/\/ The minor version number of the image.$/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32Plus
MinorLinkerVersion	header_pe.h	/^    uint8_t MinorLinkerVersion;        \/\/ The linker minor version number.$/;"	m	struct:TOptionalHeaderStandardFields_PE32
MinorLinkerVersion	header_pe.h	/^    uint8_t MinorLinkerVersion;        \/\/ The linker minor version number.$/;"	m	struct:TOptionalHeaderStandardFields_PE32Plus
MinorOperatingSystemVersion	header_pe.h	/^    uint16_t MinorOperatingSystemVersion; \/\/ The minor version number of the required operating system.$/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32
MinorOperatingSystemVersion	header_pe.h	/^    uint16_t MinorOperatingSystemVersion; \/\/ The minor version number of the required operating system.$/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32Plus
MinorRuntimeVersion	header_clr.h	/^    uint16_t MinorRuntimeVersion; \/\/ The minor portion of the version, currently 0.$/;"	m	struct:TCLRHeader
MinorRuntimeVersion	x/header_clr.h	/^    uint16_t MinorRuntimeVersion; \/\/ The minor portion of the version, currently 0.$/;"	m	struct:TCLRHeader
MinorSubsystemVersion	header_pe.h	/^    uint16_t MinorSubsystemVersion; \/\/ The minor version number of the subsystem.$/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32
MinorSubsystemVersion	header_pe.h	/^    uint16_t MinorSubsystemVersion; \/\/ The minor version number of the subsystem.$/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32Plus
MinorVersion	header_clr.h	/^    uint16_t MinorVersion;  \/\/ Minor version, 1 (ignore on read)$/;"	m	struct:TMetadataRoot_P1
MinorVersion	header_clr.h	/^    uint8_t MinorVersion; \/\/ Minor version of table schemata; shall be 0 (§II.24.1).$/;"	m	struct:TMetadataTableHeader
MinorVersion	x/header_clr.h	/^    uint16_t MinorVersion;  \/\/ Minor version, 1 (ignore on read)$/;"	m	struct:TMetadataRoot_P1
MinorVersion	x/header_clr.h	/^    uint8_t MinorVersion; \/\/ Minor version of table schemata; shall be 0 (§II.24.1).$/;"	m	struct:TMetadataTableHeader
Mkrefany	x/OpCodes.cs	/^        Mkrefany = 0xc6,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Mkrefany	x/OpCodes.cs	/^        public static readonly OpCode Mkrefany = new OpCode(OpCodeValues.Mkrefany,$/;"	f	class:System.Reflection.Emit.OpCodes
Module	clr.c	/^    Module                 = 0x00,$/;"	e	enum:TableType	file:
Module	x/clr.c	/^    Module                 = 0x00,$/;"	e	enum:TableType	file:
ModuleRef	clr.c	/^    ModuleRef              = 0x1A,$/;"	e	enum:TableType	file:
ModuleRef	x/clr.c	/^    ModuleRef              = 0x1A,$/;"	e	enum:TableType	file:
Mul	x/OpCodes.cs	/^        Mul = 0x5a,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Mul	x/OpCodes.cs	/^        public static readonly OpCode Mul = new OpCode(OpCodeValues.Mul,$/;"	f	class:System.Reflection.Emit.OpCodes
Mul_Ovf	x/OpCodes.cs	/^        Mul_Ovf = 0xd8,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Mul_Ovf	x/OpCodes.cs	/^        public static readonly OpCode Mul_Ovf = new OpCode(OpCodeValues.Mul_Ovf,$/;"	f	class:System.Reflection.Emit.OpCodes
Mul_Ovf_Un	x/OpCodes.cs	/^        Mul_Ovf_Un = 0xd9,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Mul_Ovf_Un	x/OpCodes.cs	/^        public static readonly OpCode Mul_Ovf_Un = new OpCode(OpCodeValues.Mul_Ovf_Un,$/;"	f	class:System.Reflection.Emit.OpCodes
Name	header_pe.h	/^    char Name[8]; \/\/ An 8-byte, null-padded UTF-8 encoded string.$/;"	m	struct:TSectionTable
Neg	x/OpCodes.cs	/^        Neg = 0x65,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Neg	x/OpCodes.cs	/^        public static readonly OpCode Neg = new OpCode(OpCodeValues.Neg,$/;"	f	class:System.Reflection.Emit.OpCodes
NestedClass	clr.c	/^    NestedClass            = 0x29,$/;"	e	enum:TableType	file:
NestedClass	x/clr.c	/^    NestedClass            = 0x29,$/;"	e	enum:TableType	file:
Newarr	x/OpCodes.cs	/^        Newarr = 0x8d,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Newarr	x/OpCodes.cs	/^        public static readonly OpCode Newarr = new OpCode(OpCodeValues.Newarr,$/;"	f	class:System.Reflection.Emit.OpCodes
Newobj	x/OpCodes.cs	/^        Newobj = 0x73,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Newobj	x/OpCodes.cs	/^        public static readonly OpCode Newobj = new OpCode(OpCodeValues.Newobj,$/;"	f	class:System.Reflection.Emit.OpCodes
Next	x/FlowControl.cs	/^        Next = 5,$/;"	e	enum:System.Reflection.Emit.FlowControl	file:
Nop	x/OpCodes.cs	/^        Nop = 0x00,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Nop	x/OpCodes.cs	/^        public static readonly OpCode Nop = new OpCode(OpCodeValues.Nop,$/;"	f	class:System.Reflection.Emit.OpCodes
Not	x/OpCodes.cs	/^        Not = 0x66,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Not	x/OpCodes.cs	/^        public static readonly OpCode Not = new OpCode(OpCodeValues.Not,$/;"	f	class:System.Reflection.Emit.OpCodes
NotUsed	clr.c	/^    NotUsed = 0x39,$/;"	e	enum:TableType	file:
NotUsed	x/clr.c	/^    NotUsed = 0x39,$/;"	e	enum:TableType	file:
Nternal	x/OpCodeType.cs	/^        Nternal = 2,$/;"	e	enum:System.Reflection.Emit.OpCodeType	file:
NumberOfLinenumbers	header_pe.h	/^    uint16_t NumberOfLinenumbers; \/\/ The number of line-number entries for the section. This value should be zero for an image because COFF debugging information is deprecated.$/;"	m	struct:TSectionTable
NumberOfRelocations	header_pe.h	/^    uint16_t NumberOfRelocations; \/\/ The number of relocation entries for the section. This is set to zero for executable images.$/;"	m	struct:TSectionTable
NumberOfRvaAndSizes	header_pe.h	/^    uint32_t NumberOfRvaAndSizes; \/\/ The number of data-directory entries in the remainder of the optional header. Each describes a location and size.$/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32
NumberOfRvaAndSizes	header_pe.h	/^    uint32_t NumberOfRvaAndSizes; \/\/ The number of data-directory entries in the remainder of the optional header. Each describes a location and size.$/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32Plus
NumberOfSections	header_pe.h	/^    uint16_t NumberOfSections;       \/\/ The number of sections. This indicates the size of the section table, which immediately follows the headers.$/;"	m	struct:TCOFFFileHeader
NumberOfSymbols	header_pe.h	/^    uint32_t NumberOfSymbols;        \/\/   The number of entries in the symbol table. $/;"	m	struct:TCOFFFileHeader
OBJ	Makefile	/^OBJ=$(patsubst %.c, %.o, $(wildcard *.c))$/;"	m
OPALIAS	opcode.c	370;"	d	file:
OPALIAS	opcode.c	387;"	d	file:
OPDEF	opcode.c	53;"	d	file:
Objmodel	x/OpCodeType.cs	/^        Objmodel = 3,$/;"	e	enum:System.Reflection.Emit.OpCodeType	file:
Offset	header_clr.h	/^	uint32_t Offset; \/\/ Memory offset to start of this stream from start of the metadata root (§II.24.2.1)$/;"	m	struct:TStreamHeader
Offset	x/header_clr.h	/^	uint32_t Offset; \/\/ Memory offset to start of this stream from start of the metadata root (§II.24.2.1)$/;"	m	struct:TStreamHeader
OpCode	opcode.h	/^struct OpCode {$/;"	s
OpCodeType	x/OpCodeType.cs	/^    public enum OpCodeType$/;"	g	namespace:System.Reflection.Emit
OpCodeValues	x/OpCodes.cs	/^    internal enum OpCodeValues$/;"	g	namespace:System.Reflection.Emit
OpCodes	x/OpCodes.cs	/^        private OpCodes()$/;"	m	class:System.Reflection.Emit.OpCodes	file:
OpCodes	x/OpCodes.cs	/^    public class OpCodes$/;"	c	namespace:System.Reflection.Emit
OperandParams	opcode.c	/^enum OperandParams {$/;"	g	file:
OperandType	x/OperandType.cs	/^    public enum OperandType$/;"	g	namespace:System.Reflection.Emit
OptionalHeaderStandardFields_PE32	header_pe.h	/^	struct TOptionalHeaderStandardFields_PE32 * OptionalHeaderStandardFields_PE32;$/;"	m	struct:PEFile	typeref:struct:PEFile::TOptionalHeaderStandardFields_PE32
OptionalHeaderStandardFields_PE32Plus	header_pe.h	/^	struct TOptionalHeaderStandardFields_PE32Plus * OptionalHeaderStandardFields_PE32Plus;$/;"	m	struct:PEFile	typeref:struct:PEFile::TOptionalHeaderStandardFields_PE32Plus
OptionalHeaderWindowsSpecificFields_PE32	header_pe.h	/^	struct TOptionalHeaderWindowsSpecificFields_PE32 * OptionalHeaderWindowsSpecificFields_PE32;$/;"	m	struct:PEFile	typeref:struct:PEFile::TOptionalHeaderWindowsSpecificFields_PE32
OptionalHeaderWindowsSpecificFields_PE32Plus	header_pe.h	/^	struct TOptionalHeaderWindowsSpecificFields_PE32Plus * OptionalHeaderWindowsSpecificFields_PE32Plus;$/;"	m	struct:PEFile	typeref:struct:PEFile::TOptionalHeaderWindowsSpecificFields_PE32Plus
Or	x/OpCodes.cs	/^        Or = 0x60,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Or	x/OpCodes.cs	/^        public static readonly OpCode Or = new OpCode(OpCodeValues.Or,$/;"	f	class:System.Reflection.Emit.OpCodes
PEFile	header_pe.h	/^struct PEFile {$/;"	s
Param	clr.c	/^    Param                  = 0x08,$/;"	e	enum:TableType	file:
Param	x/clr.c	/^    Param                  = 0x08,$/;"	e	enum:TableType	file:
Permission	clr.c	/^    Permission = 0x38, \/\/ TODO:$/;"	e	enum:TableType	file:
Permission	x/clr.c	/^    Permission = 0x38, \/\/ TODO:$/;"	e	enum:TableType	file:
Phi	x/FlowControl.cs	/^        Phi = 6,$/;"	e	enum:System.Reflection.Emit.FlowControl	file:
PointerToLinenumbers	header_pe.h	/^    uint32_t PointerToLinenumbers; \/\/ The file pointer to the beginning of line-number entries for the section. This is set to zero if there are no COFF line numbers. $/;"	m	struct:TSectionTable
PointerToRawData	header_pe.h	/^    uint32_t PointerToRawData; \/\/ The file pointer to the first page of the section within the COFF file. $/;"	m	struct:TSectionTable
PointerToRelocations	header_pe.h	/^    uint32_t PointerToRelocations; \/\/ The file pointer to the beginning of relocation entries for the section. This is set to zero for executable images or if there are no relocations.$/;"	m	struct:TSectionTable
PointerToSymbolTable	header_pe.h	/^    uint32_t PointerToSymbolTable;   \/\/ The file offset of the COFF symbol table, or zero if no COFF symbol table is present. $/;"	m	struct:TCOFFFileHeader
Pop	x/OpCodes.cs	/^        Pop = 0x26,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Pop	x/OpCodes.cs	/^        public static readonly OpCode Pop = new OpCode(OpCodeValues.Pop,$/;"	f	class:System.Reflection.Emit.OpCodes
Pop0	x/StackBehaviour.cs	/^        Pop0 = 0,$/;"	e	enum:System.Reflection.Emit.StackBehaviour	file:
Pop1	x/StackBehaviour.cs	/^        Pop1 = 1,$/;"	e	enum:System.Reflection.Emit.StackBehaviour	file:
Pop1_pop1	x/StackBehaviour.cs	/^        Pop1_pop1 = 2,$/;"	e	enum:System.Reflection.Emit.StackBehaviour	file:
Popi	x/StackBehaviour.cs	/^        Popi = 3,$/;"	e	enum:System.Reflection.Emit.StackBehaviour	file:
Popi_pop1	x/StackBehaviour.cs	/^        Popi_pop1 = 4,$/;"	e	enum:System.Reflection.Emit.StackBehaviour	file:
Popi_popi	x/StackBehaviour.cs	/^        Popi_popi = 5,$/;"	e	enum:System.Reflection.Emit.StackBehaviour	file:
Popi_popi8	x/StackBehaviour.cs	/^        Popi_popi8 = 6,$/;"	e	enum:System.Reflection.Emit.StackBehaviour	file:
Popi_popi_popi	x/StackBehaviour.cs	/^        Popi_popi_popi = 7,$/;"	e	enum:System.Reflection.Emit.StackBehaviour	file:
Popi_popr4	x/StackBehaviour.cs	/^        Popi_popr4 = 8,$/;"	e	enum:System.Reflection.Emit.StackBehaviour	file:
Popi_popr8	x/StackBehaviour.cs	/^        Popi_popr8 = 9,$/;"	e	enum:System.Reflection.Emit.StackBehaviour	file:
Popref	x/StackBehaviour.cs	/^        Popref = 10,$/;"	e	enum:System.Reflection.Emit.StackBehaviour	file:
Popref_pop1	x/StackBehaviour.cs	/^        Popref_pop1 = 11,$/;"	e	enum:System.Reflection.Emit.StackBehaviour	file:
Popref_popi	x/StackBehaviour.cs	/^        Popref_popi = 12,$/;"	e	enum:System.Reflection.Emit.StackBehaviour	file:
Popref_popi_pop1	x/StackBehaviour.cs	/^        Popref_popi_pop1 = 28,$/;"	e	enum:System.Reflection.Emit.StackBehaviour	file:
Popref_popi_popi	x/StackBehaviour.cs	/^        Popref_popi_popi = 13,$/;"	e	enum:System.Reflection.Emit.StackBehaviour	file:
Popref_popi_popi8	x/StackBehaviour.cs	/^        Popref_popi_popi8 = 14,$/;"	e	enum:System.Reflection.Emit.StackBehaviour	file:
Popref_popi_popr4	x/StackBehaviour.cs	/^        Popref_popi_popr4 = 15,$/;"	e	enum:System.Reflection.Emit.StackBehaviour	file:
Popref_popi_popr8	x/StackBehaviour.cs	/^        Popref_popi_popr8 = 16,$/;"	e	enum:System.Reflection.Emit.StackBehaviour	file:
Popref_popi_popref	x/StackBehaviour.cs	/^        Popref_popi_popref = 17,$/;"	e	enum:System.Reflection.Emit.StackBehaviour	file:
Prefix	x/OpCodeType.cs	/^        Prefix = 4,$/;"	e	enum:System.Reflection.Emit.OpCodeType	file:
Prefix1	x/OpCodes.cs	/^        Prefix1 = 0xfe,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Prefix1	x/OpCodes.cs	/^        public static readonly OpCode Prefix1 = new OpCode(OpCodeValues.Prefix1,$/;"	f	class:System.Reflection.Emit.OpCodes
Prefix2	x/OpCodes.cs	/^        Prefix2 = 0xfd,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Prefix2	x/OpCodes.cs	/^        public static readonly OpCode Prefix2 = new OpCode(OpCodeValues.Prefix2,$/;"	f	class:System.Reflection.Emit.OpCodes
Prefix3	x/OpCodes.cs	/^        Prefix3 = 0xfc,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Prefix3	x/OpCodes.cs	/^        public static readonly OpCode Prefix3 = new OpCode(OpCodeValues.Prefix3,$/;"	f	class:System.Reflection.Emit.OpCodes
Prefix4	x/OpCodes.cs	/^        Prefix4 = 0xfb,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Prefix4	x/OpCodes.cs	/^        public static readonly OpCode Prefix4 = new OpCode(OpCodeValues.Prefix4,$/;"	f	class:System.Reflection.Emit.OpCodes
Prefix5	x/OpCodes.cs	/^        Prefix5 = 0xfa,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Prefix5	x/OpCodes.cs	/^        public static readonly OpCode Prefix5 = new OpCode(OpCodeValues.Prefix5,$/;"	f	class:System.Reflection.Emit.OpCodes
Prefix6	x/OpCodes.cs	/^        Prefix6 = 0xf9,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Prefix6	x/OpCodes.cs	/^        public static readonly OpCode Prefix6 = new OpCode(OpCodeValues.Prefix6,$/;"	f	class:System.Reflection.Emit.OpCodes
Prefix7	x/OpCodes.cs	/^        Prefix7 = 0xf8,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Prefix7	x/OpCodes.cs	/^        public static readonly OpCode Prefix7 = new OpCode(OpCodeValues.Prefix7,$/;"	f	class:System.Reflection.Emit.OpCodes
Prefixref	x/OpCodes.cs	/^        Prefixref = 0xff,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Prefixref	x/OpCodes.cs	/^        public static readonly OpCode Prefixref = new OpCode(OpCodeValues.Prefixref,$/;"	f	class:System.Reflection.Emit.OpCodes
Primitive	x/OpCodeType.cs	/^        Primitive = 5,$/;"	e	enum:System.Reflection.Emit.OpCodeType	file:
PrintContext	clr.c	/^struct PrintContext {$/;"	s	file:
PrintContext	x/clr.c	/^struct PrintContext {$/;"	s	file:
Property	clr.c	/^    Property               = 0x17, MethodSemantics        = 0x18,$/;"	e	enum:TableType	file:
Property	x/clr.c	/^    Property               = 0x17,$/;"	e	enum:TableType	file:
PropertyMap	clr.c	/^    PropertyMap            = 0x15,$/;"	e	enum:TableType	file:
PropertyMap	x/clr.c	/^    PropertyMap            = 0x15,$/;"	e	enum:TableType	file:
Push0	x/StackBehaviour.cs	/^        Push0 = 18,$/;"	e	enum:System.Reflection.Emit.StackBehaviour	file:
Push1	x/StackBehaviour.cs	/^        Push1 = 19,$/;"	e	enum:System.Reflection.Emit.StackBehaviour	file:
Push1_push1	x/StackBehaviour.cs	/^        Push1_push1 = 20,$/;"	e	enum:System.Reflection.Emit.StackBehaviour	file:
Pushi	x/StackBehaviour.cs	/^        Pushi = 21,$/;"	e	enum:System.Reflection.Emit.StackBehaviour	file:
Pushi8	x/StackBehaviour.cs	/^        Pushi8 = 22,$/;"	e	enum:System.Reflection.Emit.StackBehaviour	file:
Pushr4	x/StackBehaviour.cs	/^        Pushr4 = 23,$/;"	e	enum:System.Reflection.Emit.StackBehaviour	file:
Pushr8	x/StackBehaviour.cs	/^        Pushr8 = 24,$/;"	e	enum:System.Reflection.Emit.StackBehaviour	file:
Pushref	x/StackBehaviour.cs	/^        Pushref = 25,$/;"	e	enum:System.Reflection.Emit.StackBehaviour	file:
READ_HEADER	pe.c	74;"	d	file:
READ_TABLE	clr.c	16;"	d	file:
READ_TABLE	x/clr.c	16;"	d	file:
REFPRE	opcode.c	25;"	d	file:
RESERVED_PREFIX_START	opcode.c	26;"	d	file:
Readonly	x/OpCodes.cs	/^        public static readonly OpCode Readonly = new OpCode(OpCodeValues.Readonly_,$/;"	f	class:System.Reflection.Emit.OpCodes
Readonly_	x/OpCodes.cs	/^        Readonly_ = 0xfe1e,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Refanytype	x/OpCodes.cs	/^        Refanytype = 0xfe1d,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Refanytype	x/OpCodes.cs	/^        public static readonly OpCode Refanytype = new OpCode(OpCodeValues.Refanytype,$/;"	f	class:System.Reflection.Emit.OpCodes
Refanyval	x/OpCodes.cs	/^        Refanyval = 0xc2,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Refanyval	x/OpCodes.cs	/^        public static readonly OpCode Refanyval = new OpCode(OpCodeValues.Refanyval,$/;"	f	class:System.Reflection.Emit.OpCodes
Rem	x/OpCodes.cs	/^        Rem = 0x5d,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Rem	x/OpCodes.cs	/^        public static readonly OpCode Rem = new OpCode(OpCodeValues.Rem,$/;"	f	class:System.Reflection.Emit.OpCodes
Rem_Un	x/OpCodes.cs	/^        Rem_Un = 0x5e,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Rem_Un	x/OpCodes.cs	/^        public static readonly OpCode Rem_Un = new OpCode(OpCodeValues.Rem_Un,$/;"	f	class:System.Reflection.Emit.OpCodes
Reserved	header_clr.h	/^    uint32_t Reserved;      \/\/ Reserved, always 0 (§II.24.1).$/;"	m	struct:TMetadataRoot_P1
Reserved	x/header_clr.h	/^    uint32_t Reserved;      \/\/ Reserved, always 0 (§II.24.1).$/;"	m	struct:TMetadataRoot_P1
Reserved1	header_clr.h	/^    uint32_t Reserved1; \/\/ Reserved, always 0 (§II.24.1).$/;"	m	struct:TMetadataTableHeader
Reserved1	x/header_clr.h	/^    uint32_t Reserved1; \/\/ Reserved, always 0 (§II.24.1).$/;"	m	struct:TMetadataTableHeader
Reserved2	header_clr.h	/^    uint8_t Reserved2; \/\/ Reserved, always 1 (§II.24.1).$/;"	m	struct:TMetadataTableHeader
Reserved2	x/header_clr.h	/^    uint8_t Reserved2; \/\/ Reserved, always 1 (§II.24.1).$/;"	m	struct:TMetadataTableHeader
ResolutionScope	clr.c	194;"	d	file:
ResolutionScope	x/clr.c	192;"	d	file:
ResourcesSize	header_clr.h	/^    uint32_t ResourcesSize;           \/\/ RVA and size of implementation-specific resources.$/;"	m	struct:TCLRHeader
ResourcesSize	x/header_clr.h	/^    uint32_t ResourcesSize;           \/\/ RVA and size of implementation-specific resources.$/;"	m	struct:TCLRHeader
ResourcesVirtualAddress	header_clr.h	/^    uint32_t ResourcesVirtualAddress; \/\/ RVA and size of implementation-specific resources.$/;"	m	struct:TCLRHeader
ResourcesVirtualAddress	x/header_clr.h	/^    uint32_t ResourcesVirtualAddress; \/\/ RVA and size of implementation-specific resources.$/;"	m	struct:TCLRHeader
Ret	x/OpCodes.cs	/^        Ret = 0x2a,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Ret	x/OpCodes.cs	/^        public static readonly OpCode Ret = new OpCode(OpCodeValues.Ret,$/;"	f	class:System.Reflection.Emit.OpCodes
Rethrow	x/OpCodes.cs	/^        Rethrow = 0xfe1a,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Rethrow	x/OpCodes.cs	/^        public static readonly OpCode Rethrow = new OpCode(OpCodeValues.Rethrow,$/;"	f	class:System.Reflection.Emit.OpCodes
Return	x/FlowControl.cs	/^        Return = 7,$/;"	e	enum:System.Reflection.Emit.FlowControl	file:
S	clr.c	199;"	d	file:
S	clr.c	247;"	d	file:
S	x/clr.c	197;"	d	file:
S	x/clr.c	245;"	d	file:
STP1	opcode.c	24;"	d	file:
SectionAlignment	header_pe.h	/^    uint32_t SectionAlignment;  \/\/ The alignment (in bytes) of sections when they are loaded into memory.$/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32
SectionAlignment	header_pe.h	/^    uint32_t SectionAlignment; \/\/ The alignment (in bytes) of sections when they are loaded into memory.$/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32Plus
SectionTable	header_pe.h	/^	struct TSectionTable * SectionTable;$/;"	m	struct:PEFile	typeref:struct:PEFile::TSectionTable
Shl	x/OpCodes.cs	/^        Shl = 0x62,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Shl	x/OpCodes.cs	/^        public static readonly OpCode Shl = new OpCode(OpCodeValues.Shl,$/;"	f	class:System.Reflection.Emit.OpCodes
ShortInlineBrTarget	opcode.c	/^    ShortInlineBrTarget = 15, \/\/ The operand is an 8-bit integer branch target.$/;"	e	enum:OperandParams	file:
ShortInlineBrTarget	x/OperandType.cs	/^        ShortInlineBrTarget = 15,$/;"	e	enum:System.Reflection.Emit.OperandType	file:
ShortInlineI	opcode.c	/^    ShortInlineI = 16,        \/\/ The operand is an 8-bit integer.$/;"	e	enum:OperandParams	file:
ShortInlineI	x/OperandType.cs	/^        ShortInlineI = 16,$/;"	e	enum:System.Reflection.Emit.OperandType	file:
ShortInlineR	opcode.c	/^    ShortInlineR = 17,        \/\/ The operand is a 32-bit IEEE floating point number.$/;"	e	enum:OperandParams	file:
ShortInlineR	x/OperandType.cs	/^        ShortInlineR = 17,$/;"	e	enum:System.Reflection.Emit.OperandType	file:
ShortInlineVar	opcode.c	/^    ShortInlineVar = 18,      \/\/ The operand is an 8-bit integer containing the ordinal of a local variable or an argumenta.$/;"	e	enum:OperandParams	file:
ShortInlineVar	x/OperandType.cs	/^        ShortInlineVar = 18,$/;"	e	enum:System.Reflection.Emit.OperandType	file:
Shr	x/OpCodes.cs	/^        Shr = 0x63,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Shr	x/OpCodes.cs	/^        public static readonly OpCode Shr = new OpCode(OpCodeValues.Shr,$/;"	f	class:System.Reflection.Emit.OpCodes
Shr_Un	x/OpCodes.cs	/^        Shr_Un = 0x64,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Shr_Un	x/OpCodes.cs	/^        public static readonly OpCode Shr_Un = new OpCode(OpCodeValues.Shr_Un,$/;"	f	class:System.Reflection.Emit.OpCodes
Signature	header_clr.h	/^    uint32_t Signature;     \/\/ Magic signature for physical metadata : 0x424A5342.$/;"	m	struct:TMetadataRoot_P1
Signature	x/header_clr.h	/^    uint32_t Signature;     \/\/ Magic signature for physical metadata : 0x424A5342.$/;"	m	struct:TMetadataRoot_P1
Size	header_clr.h	/^	uint32_t Size;   \/\/ Size of this stream in bytes, shall be a multiple of 4.$/;"	m	struct:TStreamHeader
Size	header_pe.h	/^    uint32_t Size;$/;"	m	struct:TIMAGE_DATA_DIRECTORY
Size	x/header_clr.h	/^	uint32_t Size;   \/\/ Size of this stream in bytes, shall be a multiple of 4.$/;"	m	struct:TStreamHeader
SizeOfCode	header_pe.h	/^    uint32_t SizeOfCode;               \/\/ The size of the code (text) section, or the sum of all code sections if there are multiple sections.$/;"	m	struct:TOptionalHeaderStandardFields_PE32
SizeOfCode	header_pe.h	/^    uint32_t SizeOfCode;               \/\/ The size of the code (text) section, or the sum of all code sections if there are multiple sections.$/;"	m	struct:TOptionalHeaderStandardFields_PE32Plus
SizeOfHeaders	header_pe.h	/^    uint32_t SizeOfHeaders;       \/\/ The combined size of an MS-DOS stub, PE header, and section headers rounded up to a multiple of FileAlignment.$/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32
SizeOfHeaders	header_pe.h	/^    uint32_t SizeOfHeaders;       \/\/ The combined size of an MS-DOS stub, PE header, and section headers rounded up to a multiple of FileAlignment.$/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32Plus
SizeOfHeapCommit	header_pe.h	/^    uint32_t SizeOfHeapCommit;    \/\/ The size of the local heap space to commit.$/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32
SizeOfHeapCommit	header_pe.h	/^    uint64_t SizeOfHeapCommit;    \/\/ The size of the local heap space to commit.$/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32Plus
SizeOfHeapReserve	header_pe.h	/^    uint32_t SizeOfHeapReserve;   \/\/ The size of the local heap space to reserve. $/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32
SizeOfHeapReserve	header_pe.h	/^    uint64_t SizeOfHeapReserve;   \/\/ The size of the local heap space to reserve. $/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32Plus
SizeOfImage	header_pe.h	/^    uint32_t SizeOfImage;         \/\/ The size (in bytes) of the image, including all headers, as the image is loaded in memory. It must be a multiple of SectionAlignment.$/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32
SizeOfImage	header_pe.h	/^    uint32_t SizeOfImage;         \/\/ The size (in bytes) of the image, including all headers, as the image is loaded in memory. It must be a multiple of SectionAlignment.$/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32Plus
SizeOfInitializedData	header_pe.h	/^    uint32_t SizeOfInitializedData;    \/\/ The size of the initialized data section, or the sum of all such sections if there are multiple data sections.$/;"	m	struct:TOptionalHeaderStandardFields_PE32
SizeOfInitializedData	header_pe.h	/^    uint32_t SizeOfInitializedData;    \/\/ The size of the initialized data section, or the sum of all such sections if there are multiple data sections.$/;"	m	struct:TOptionalHeaderStandardFields_PE32Plus
SizeOfOptionalHeader	header_pe.h	/^    uint16_t SizeOfOptionalHeader;   \/\/ The size of the optional header, which is required for executable files but not for object files. $/;"	m	struct:TCOFFFileHeader
SizeOfRawData	header_pe.h	/^    uint32_t SizeOfRawData;  \/\/ The size of the section (for object files) or the size of the initialized data on disk (for image files). $/;"	m	struct:TSectionTable
SizeOfStackCommit	header_pe.h	/^    uint32_t SizeOfStackCommit;   \/\/ The size of the stack to commit.$/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32
SizeOfStackCommit	header_pe.h	/^    uint64_t SizeOfStackCommit;   \/\/ The size of the stack to commit.$/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32Plus
SizeOfStackReserve	header_pe.h	/^    uint32_t SizeOfStackReserve;  \/\/ The size of the stack to reserve. Only SizeOfStackCommit is committed; $/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32
SizeOfStackReserve	header_pe.h	/^    uint64_t SizeOfStackReserve;  \/\/ The size of the stack to reserve. Only SizeOfStackCommit is committed; $/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32Plus
SizeOfUninitializedData	header_pe.h	/^    uint32_t SizeOfUninitializedData;  \/\/ The size of the uninitialized data section (BSS), or the sum of all such sections if there are multiple BSS sections.$/;"	m	struct:TOptionalHeaderStandardFields_PE32
SizeOfUninitializedData	header_pe.h	/^    uint32_t SizeOfUninitializedData;  \/\/ The size of the uninitialized data section (BSS), or the sum of all such sections if there are multiple BSS sections.$/;"	m	struct:TOptionalHeaderStandardFields_PE32Plus
Sizeof	x/OpCodes.cs	/^        Sizeof = 0xfe1c,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Sizeof	x/OpCodes.cs	/^        public static readonly OpCode Sizeof = new OpCode(OpCodeValues.Sizeof,$/;"	f	class:System.Reflection.Emit.OpCodes
Slice	header_clr.h	/^struct Slice {$/;"	s
Slice	x/header_clr.h	/^struct Slice {$/;"	s
Sorted	header_clr.h	/^    uint64_t Sorted; \/\/ Bit vector of sorted tables.$/;"	m	struct:TMetadataTableHeader
Sorted	x/header_clr.h	/^    uint64_t Sorted; \/\/ Bit vector of sorted tables.$/;"	m	struct:TMetadataTableHeader
Stack	stack.h	/^struct Stack {$/;"	s
StackBehaviour	x/StackBehaviour.cs	/^    public enum StackBehaviour$/;"	g	namespace:System.Reflection.Emit
Stack_Get	stack.c	/^void * Stack_Get(struct Stack * stack, int index)$/;"	f
Stack_Grow	stack.c	/^void Stack_Grow(struct Stack * stack) $/;"	f
Stack_Init	stack.c	/^void Stack_Init(struct Stack * stack)$/;"	f
Stack_Move	stack.c	/^void Stack_Move(struct Stack * from, struct Stack * to, int count)$/;"	f
Stack_Pop	stack.c	/^void Stack_Pop(struct Stack * stack, int n)$/;"	f
Stack_Push	stack.c	/^void Stack_Push(struct Stack * stack, void * value)$/;"	f
Stack_Release	stack.c	/^void Stack_Release(struct Stack * stack)$/;"	f
StandAloneSig	clr.c	/^    StandAloneSig          = 0x11,$/;"	e	enum:TableType	file:
StandAloneSig	x/clr.c	/^    StandAloneSig          = 0x11,$/;"	e	enum:TableType	file:
Starg	x/OpCodes.cs	/^        Starg = 0xfe0b,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Starg	x/OpCodes.cs	/^        public static readonly OpCode Starg = new OpCode(OpCodeValues.Starg,$/;"	f	class:System.Reflection.Emit.OpCodes
Starg_S	x/OpCodes.cs	/^        Starg_S = 0x10,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Starg_S	x/OpCodes.cs	/^        public static readonly OpCode Starg_S = new OpCode(OpCodeValues.Starg_S,$/;"	f	class:System.Reflection.Emit.OpCodes
Stelem	x/OpCodes.cs	/^        Stelem = 0xa4,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Stelem	x/OpCodes.cs	/^        public static readonly OpCode Stelem = new OpCode(OpCodeValues.Stelem,$/;"	f	class:System.Reflection.Emit.OpCodes
Stelem_I	x/OpCodes.cs	/^        Stelem_I = 0x9b,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Stelem_I	x/OpCodes.cs	/^        public static readonly OpCode Stelem_I = new OpCode(OpCodeValues.Stelem_I,$/;"	f	class:System.Reflection.Emit.OpCodes
Stelem_I1	x/OpCodes.cs	/^        Stelem_I1 = 0x9c,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Stelem_I1	x/OpCodes.cs	/^        public static readonly OpCode Stelem_I1 = new OpCode(OpCodeValues.Stelem_I1,$/;"	f	class:System.Reflection.Emit.OpCodes
Stelem_I2	x/OpCodes.cs	/^        Stelem_I2 = 0x9d,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Stelem_I2	x/OpCodes.cs	/^        public static readonly OpCode Stelem_I2 = new OpCode(OpCodeValues.Stelem_I2,$/;"	f	class:System.Reflection.Emit.OpCodes
Stelem_I4	x/OpCodes.cs	/^        Stelem_I4 = 0x9e,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Stelem_I4	x/OpCodes.cs	/^        public static readonly OpCode Stelem_I4 = new OpCode(OpCodeValues.Stelem_I4,$/;"	f	class:System.Reflection.Emit.OpCodes
Stelem_I8	x/OpCodes.cs	/^        Stelem_I8 = 0x9f,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Stelem_I8	x/OpCodes.cs	/^        public static readonly OpCode Stelem_I8 = new OpCode(OpCodeValues.Stelem_I8,$/;"	f	class:System.Reflection.Emit.OpCodes
Stelem_R4	x/OpCodes.cs	/^        Stelem_R4 = 0xa0,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Stelem_R4	x/OpCodes.cs	/^        public static readonly OpCode Stelem_R4 = new OpCode(OpCodeValues.Stelem_R4,$/;"	f	class:System.Reflection.Emit.OpCodes
Stelem_R8	x/OpCodes.cs	/^        Stelem_R8 = 0xa1,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Stelem_R8	x/OpCodes.cs	/^        public static readonly OpCode Stelem_R8 = new OpCode(OpCodeValues.Stelem_R8,$/;"	f	class:System.Reflection.Emit.OpCodes
Stelem_Ref	x/OpCodes.cs	/^        Stelem_Ref = 0xa2,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Stelem_Ref	x/OpCodes.cs	/^        public static readonly OpCode Stelem_Ref = new OpCode(OpCodeValues.Stelem_Ref,$/;"	f	class:System.Reflection.Emit.OpCodes
Stfld	x/OpCodes.cs	/^        Stfld = 0x7d,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Stfld	x/OpCodes.cs	/^        public static readonly OpCode Stfld = new OpCode(OpCodeValues.Stfld,$/;"	f	class:System.Reflection.Emit.OpCodes
Stind_I	x/OpCodes.cs	/^        Stind_I = 0xdf,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Stind_I	x/OpCodes.cs	/^        public static readonly OpCode Stind_I = new OpCode(OpCodeValues.Stind_I,$/;"	f	class:System.Reflection.Emit.OpCodes
Stind_I1	x/OpCodes.cs	/^        Stind_I1 = 0x52,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Stind_I1	x/OpCodes.cs	/^        public static readonly OpCode Stind_I1 = new OpCode(OpCodeValues.Stind_I1,$/;"	f	class:System.Reflection.Emit.OpCodes
Stind_I2	x/OpCodes.cs	/^        Stind_I2 = 0x53,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Stind_I2	x/OpCodes.cs	/^        public static readonly OpCode Stind_I2 = new OpCode(OpCodeValues.Stind_I2,$/;"	f	class:System.Reflection.Emit.OpCodes
Stind_I4	x/OpCodes.cs	/^        Stind_I4 = 0x54,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Stind_I4	x/OpCodes.cs	/^        public static readonly OpCode Stind_I4 = new OpCode(OpCodeValues.Stind_I4,$/;"	f	class:System.Reflection.Emit.OpCodes
Stind_I8	x/OpCodes.cs	/^        Stind_I8 = 0x55,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Stind_I8	x/OpCodes.cs	/^        public static readonly OpCode Stind_I8 = new OpCode(OpCodeValues.Stind_I8,$/;"	f	class:System.Reflection.Emit.OpCodes
Stind_R4	x/OpCodes.cs	/^        Stind_R4 = 0x56,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Stind_R4	x/OpCodes.cs	/^        public static readonly OpCode Stind_R4 = new OpCode(OpCodeValues.Stind_R4,$/;"	f	class:System.Reflection.Emit.OpCodes
Stind_R8	x/OpCodes.cs	/^        Stind_R8 = 0x57,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Stind_R8	x/OpCodes.cs	/^        public static readonly OpCode Stind_R8 = new OpCode(OpCodeValues.Stind_R8,$/;"	f	class:System.Reflection.Emit.OpCodes
Stind_Ref	x/OpCodes.cs	/^        Stind_Ref = 0x51,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Stind_Ref	x/OpCodes.cs	/^        public static readonly OpCode Stind_Ref = new OpCode(OpCodeValues.Stind_Ref,$/;"	f	class:System.Reflection.Emit.OpCodes
Stloc	x/OpCodes.cs	/^        Stloc = 0xfe0e,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Stloc	x/OpCodes.cs	/^        public static readonly OpCode Stloc = new OpCode(OpCodeValues.Stloc,$/;"	f	class:System.Reflection.Emit.OpCodes
Stloc_0	x/OpCodes.cs	/^        Stloc_0 = 0x0a,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Stloc_0	x/OpCodes.cs	/^        public static readonly OpCode Stloc_0 = new OpCode(OpCodeValues.Stloc_0,$/;"	f	class:System.Reflection.Emit.OpCodes
Stloc_1	x/OpCodes.cs	/^        Stloc_1 = 0x0b,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Stloc_1	x/OpCodes.cs	/^        public static readonly OpCode Stloc_1 = new OpCode(OpCodeValues.Stloc_1,$/;"	f	class:System.Reflection.Emit.OpCodes
Stloc_2	x/OpCodes.cs	/^        Stloc_2 = 0x0c,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Stloc_2	x/OpCodes.cs	/^        public static readonly OpCode Stloc_2 = new OpCode(OpCodeValues.Stloc_2,$/;"	f	class:System.Reflection.Emit.OpCodes
Stloc_3	x/OpCodes.cs	/^        Stloc_3 = 0x0d,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Stloc_3	x/OpCodes.cs	/^        public static readonly OpCode Stloc_3 = new OpCode(OpCodeValues.Stloc_3,$/;"	f	class:System.Reflection.Emit.OpCodes
Stloc_S	x/OpCodes.cs	/^        Stloc_S = 0x13,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Stloc_S	x/OpCodes.cs	/^        public static readonly OpCode Stloc_S = new OpCode(OpCodeValues.Stloc_S,$/;"	f	class:System.Reflection.Emit.OpCodes
Stobj	x/OpCodes.cs	/^        Stobj = 0x81,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Stobj	x/OpCodes.cs	/^        public static readonly OpCode Stobj = new OpCode(OpCodeValues.Stobj,$/;"	f	class:System.Reflection.Emit.OpCodes
Streams	header_clr.h	/^	uint16_t Streams; \/\/ Number of streams, say n.$/;"	m	struct:TMetadataRoot_P2
Streams	x/header_clr.h	/^	uint16_t Streams; \/\/ Number of streams, say n.$/;"	m	struct:TMetadataRoot_P2
StrongNameSignatureSize	header_clr.h	/^    uint32_t StrongNameSignatureSize;           \/\/ RVA of the hash data for this PE file used by the CLI loader for binding and versioning$/;"	m	struct:TCLRHeader
StrongNameSignatureSize	x/header_clr.h	/^    uint32_t StrongNameSignatureSize;           \/\/ RVA of the hash data for this PE file used by the CLI loader for binding and versioning$/;"	m	struct:TCLRHeader
StrongNameSignatureVirtualAddress	header_clr.h	/^    uint32_t StrongNameSignatureVirtualAddress; \/\/ RVA of the hash data for this PE file used by the CLI loader for binding and versioning$/;"	m	struct:TCLRHeader
StrongNameSignatureVirtualAddress	x/header_clr.h	/^    uint32_t StrongNameSignatureVirtualAddress; \/\/ RVA of the hash data for this PE file used by the CLI loader for binding and versioning$/;"	m	struct:TCLRHeader
Stsfld	x/OpCodes.cs	/^        Stsfld = 0x80,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Stsfld	x/OpCodes.cs	/^        public static readonly OpCode Stsfld = new OpCode(OpCodeValues.Stsfld,$/;"	f	class:System.Reflection.Emit.OpCodes
Sub	x/OpCodes.cs	/^        Sub = 0x59,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Sub	x/OpCodes.cs	/^        public static readonly OpCode Sub = new OpCode(OpCodeValues.Sub,$/;"	f	class:System.Reflection.Emit.OpCodes
Sub_Ovf	x/OpCodes.cs	/^        Sub_Ovf = 0xda,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Sub_Ovf	x/OpCodes.cs	/^        public static readonly OpCode Sub_Ovf = new OpCode(OpCodeValues.Sub_Ovf,$/;"	f	class:System.Reflection.Emit.OpCodes
Sub_Ovf_Un	x/OpCodes.cs	/^        Sub_Ovf_Un = 0xdb,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Sub_Ovf_Un	x/OpCodes.cs	/^        public static readonly OpCode Sub_Ovf_Un = new OpCode(OpCodeValues.Sub_Ovf_Un,$/;"	f	class:System.Reflection.Emit.OpCodes
Subsystem	header_pe.h	/^    uint16_t Subsystem;           \/\/ The subsystem that is required to run this image. For more information, see Windows Subsystem.$/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32
Subsystem	header_pe.h	/^    uint16_t Subsystem;           \/\/ The subsystem that is required to run this image. For more information, see Windows Subsystem.$/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32Plus
Switch	x/OpCodes.cs	/^        Switch = 0x45,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Switch	x/OpCodes.cs	/^        public static readonly OpCode Switch = new OpCode(OpCodeValues.Switch,$/;"	f	class:System.Reflection.Emit.OpCodes
System.Reflection.Emit	x/FlowControl.cs	/^namespace System.Reflection.Emit$/;"	n
System.Reflection.Emit	x/OpCodeType.cs	/^namespace System.Reflection.Emit$/;"	n
System.Reflection.Emit	x/OpCodes.cs	/^namespace System.Reflection.Emit$/;"	n
System.Reflection.Emit	x/OperandType.cs	/^namespace System.Reflection.Emit$/;"	n
System.Reflection.Emit	x/StackBehaviour.cs	/^namespace System.Reflection.Emit$/;"	n
TCLRHeader	header_clr.h	/^struct TCLRHeader {$/;"	s
TCLRHeader	x/header_clr.h	/^struct TCLRHeader {$/;"	s
TCOFFFileHeader	header_pe.h	/^struct TCOFFFileHeader {$/;"	s
TIMAGE_DATA_DIRECTORY	header_pe.h	/^struct TIMAGE_DATA_DIRECTORY {$/;"	s
TMetadataRoot_P1	header_clr.h	/^struct TMetadataRoot_P1 {$/;"	s
TMetadataRoot_P1	x/header_clr.h	/^struct TMetadataRoot_P1 {$/;"	s
TMetadataRoot_P2	header_clr.h	/^struct TMetadataRoot_P2 {$/;"	s
TMetadataRoot_P2	x/header_clr.h	/^struct TMetadataRoot_P2 {$/;"	s
TMetadataTableHeader	header_clr.h	/^struct TMetadataTableHeader {$/;"	s
TMetadataTableHeader	x/header_clr.h	/^struct TMetadataTableHeader {$/;"	s
TOptionalHeaderStandardFields_PE32	header_pe.h	/^struct TOptionalHeaderStandardFields_PE32 { \/\/ (Image Only)$/;"	s
TOptionalHeaderStandardFields_PE32Plus	header_pe.h	/^struct TOptionalHeaderStandardFields_PE32Plus { \/\/ (Image Only)$/;"	s
TOptionalHeaderWindowsSpecificFields_PE32	header_pe.h	/^struct TOptionalHeaderWindowsSpecificFields_PE32 { $/;"	s
TOptionalHeaderWindowsSpecificFields_PE32Plus	header_pe.h	/^struct TOptionalHeaderWindowsSpecificFields_PE32Plus {$/;"	s
TSectionTable	header_pe.h	/^struct TSectionTable {$/;"	s
TStreamHeader	header_clr.h	/^struct TStreamHeader {$/;"	s
TStreamHeader	x/header_clr.h	/^struct TStreamHeader {$/;"	s
Table	table.h	/^struct Table {$/;"	s
TableType	clr.c	/^enum TableType {$/;"	g	file:
TableType	x/clr.c	/^enum TableType {$/;"	g	file:
Tail_	x/OpCodes.cs	/^        Tail_ = 0xfe14,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Tailcall	x/OpCodes.cs	/^        public static readonly OpCode Tailcall = new OpCode(OpCodeValues.Tail_,$/;"	f	class:System.Reflection.Emit.OpCodes
TakesSingleByteArgument	x/OpCodes.cs	/^        public static bool TakesSingleByteArgument(OpCode inst)$/;"	m	class:System.Reflection.Emit.OpCodes
Throw	x/FlowControl.cs	/^        Throw = 8,$/;"	e	enum:System.Reflection.Emit.FlowControl	file:
Throw	x/OpCodes.cs	/^        Throw = 0x7a,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Throw	x/OpCodes.cs	/^        public static readonly OpCode Throw = new OpCode(OpCodeValues.Throw,$/;"	f	class:System.Reflection.Emit.OpCodes
TimeDateStamp	header_pe.h	/^    uint32_t TimeDateStamp;          \/\/ The low 32 bits of the number of seconds since 00:00 January 1, 1970 (a C run-time time_t value), which indicates when the file was created.$/;"	m	struct:TCOFFFileHeader
TypeDef	clr.c	/^    TypeDef                = 0x02,$/;"	e	enum:TableType	file:
TypeDef	x/clr.c	/^    TypeDef                = 0x02,$/;"	e	enum:TableType	file:
TypeDefOrRef	clr.c	184;"	d	file:
TypeDefOrRef	x/clr.c	182;"	d	file:
TypeOrMethodDef	clr.c	195;"	d	file:
TypeOrMethodDef	x/clr.c	193;"	d	file:
TypeRef	clr.c	/^    TypeRef                = 0x01,$/;"	e	enum:TableType	file:
TypeRef	x/clr.c	/^    TypeRef                = 0x01,$/;"	e	enum:TableType	file:
TypeSpec	clr.c	/^    TypeSpec               = 0x1B,$/;"	e	enum:TableType	file:
TypeSpec	x/clr.c	/^    TypeSpec               = 0x1B,$/;"	e	enum:TableType	file:
Unaligned	x/OpCodes.cs	/^        public static readonly OpCode Unaligned = new OpCode(OpCodeValues.Unaligned_,$/;"	f	class:System.Reflection.Emit.OpCodes
Unaligned_	x/OpCodes.cs	/^        Unaligned_ = 0xfe12,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Unbox	x/OpCodes.cs	/^        Unbox = 0x79,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Unbox	x/OpCodes.cs	/^        public static readonly OpCode Unbox = new OpCode(OpCodeValues.Unbox,$/;"	f	class:System.Reflection.Emit.OpCodes
Unbox_Any	x/OpCodes.cs	/^        Unbox_Any = 0xa5,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Unbox_Any	x/OpCodes.cs	/^        public static readonly OpCode Unbox_Any = new OpCode(OpCodeValues.Unbox_Any,$/;"	f	class:System.Reflection.Emit.OpCodes
VTableFixupsSize	header_clr.h	/^    uint32_t VTableFixupsSize;           \/\/ RVA of an array of locations in the file that contain an array of function pointers (e.g., vtable slots), see below.$/;"	m	struct:TCLRHeader
VTableFixupsSize	x/header_clr.h	/^    uint32_t VTableFixupsSize;           \/\/ RVA of an array of locations in the file that contain an array of function pointers (e.g., vtable slots), see below.$/;"	m	struct:TCLRHeader
VTableFixupsVirtualAddress	header_clr.h	/^    uint32_t VTableFixupsVirtualAddress; \/\/ RVA of an array of locations in the file that contain an array of function pointers (e.g., vtable slots), see below.$/;"	m	struct:TCLRHeader
VTableFixupsVirtualAddress	x/header_clr.h	/^    uint32_t VTableFixupsVirtualAddress; \/\/ RVA of an array of locations in the file that contain an array of function pointers (e.g., vtable slots), see below.$/;"	m	struct:TCLRHeader
Valid	header_clr.h	/^    uint64_t Valid;  \/\/ Bit vector of present tables, let n be the number of bits that are 1.$/;"	m	struct:TMetadataTableHeader
Valid	x/header_clr.h	/^    uint64_t Valid;  \/\/ Bit vector of present tables, let n be the number of bits that are 1.$/;"	m	struct:TMetadataTableHeader
Value	value.h	/^struct Value {$/;"	s
Varpop	x/StackBehaviour.cs	/^        Varpop = 26,$/;"	e	enum:System.Reflection.Emit.StackBehaviour	file:
Varpush	x/StackBehaviour.cs	/^        Varpush = 27,$/;"	e	enum:System.Reflection.Emit.StackBehaviour	file:
VirtualAddress	header_pe.h	/^    uint32_t VirtualAddress; \/\/ For executable images, the address of the first byte of the section relative to the image base when the section is loaded into memory. $/;"	m	struct:TSectionTable
VirtualAddress	header_pe.h	/^    uint32_t VirtualAddress;$/;"	m	struct:TIMAGE_DATA_DIRECTORY
VirtualSize	header_pe.h	/^    uint32_t VirtualSize; \/\/ The total size of the section when loaded into memory.$/;"	m	struct:TSectionTable
Volatile	x/OpCodes.cs	/^        public static readonly OpCode Volatile = new OpCode(OpCodeValues.Volatile_,$/;"	f	class:System.Reflection.Emit.OpCodes
Volatile_	x/OpCodes.cs	/^        Volatile_ = 0xfe13,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Win32VersionValue	header_pe.h	/^    uint32_t Win32VersionValue;   \/\/ Reserved, must be zero.$/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32
Win32VersionValue	header_pe.h	/^    uint32_t Win32VersionValue;   \/\/ Reserved, must be zero.$/;"	m	struct:TOptionalHeaderWindowsSpecificFields_PE32Plus
XContext	clr.c	/^struct XContext {$/;"	s	file:
XContext	x/clr.c	/^struct XContext {$/;"	s	file:
Xor	x/OpCodes.cs	/^        Xor = 0x61,$/;"	e	enum:System.Reflection.Emit.OpCodeValues	file:
Xor	x/OpCodes.cs	/^        public static readonly OpCode Xor = new OpCode(OpCodeValues.Xor,$/;"	f	class:System.Reflection.Emit.OpCodes
_CLI_READER_H_	reader.h	2;"	d
_CLRPARSER_CLR_HEADER_H_	header_clr.h	2;"	d
_CLRPARSER_CLR_HEADER_H_	x/header_clr.h	2;"	d
_CLRPARSER_HEADER_H_	table.h	2;"	d
_CLRPARSER_PE_HEADER_H_	header_pe.h	2;"	d
_D	clr.c	/^void _D(void * ctx, char type, const char * name, const int values [])$/;"	f
_D	x/clr.c	/^void _D(void * ctx, char type, const char * name, const int values [])$/;"	f
_F	clr.c	/^void _F(void * ctx, char type, const char * name, const int values [])$/;"	f
_F	x/clr.c	/^void _F(void * ctx, char type, const char * name, const int values [])$/;"	f
_OPALIAS_DEFINED_	opcode.c	369;"	d	file:
_OPALIAS_DEFINED_	opcode.c	388;"	d	file:
_VM_INSTRUCTION_H_	instruction.h	2;"	d
_VM_METHOD_BODY_H_	method_body.h	2;"	d
_VM_STACK_H_	stack.h	2;"	d
_VM_VALUE_H_	value.h	2;"	d
__OPCODE_DEF_	opcode.c	21;"	d	file:
blobHeap	header_clr.h	/^    struct Slice blobHeap;$/;"	m	struct:Context	typeref:struct:Context::Slice
blobHeap	x/header_clr.h	/^    struct Slice blobHeap;$/;"	m	struct:Context	typeref:struct:Context::Slice
blob_index	clr.c	134;"	d	file:
blob_index	x/clr.c	131;"	d	file:
buffer	reader.h	/^struct buffer {$/;"	s
buffer_init	reader.c	/^void buffer_init(struct buffer * buffer, const char * ptr, size_t len) {$/;"	f
buffer_read_bytes	reader.c	/^const char * buffer_read_bytes(struct buffer * buffer, size_t len)$/;"	f
buffer_read_f32	reader.c	/^float buffer_read_f32(struct buffer * buffer)$/;"	f
buffer_read_f64	reader.c	/^double buffer_read_f64(struct buffer * buffer)$/;"	f
buffer_read_u16	reader.c	/^uint16_t buffer_read_u16(struct buffer * buffer)$/;"	f
buffer_read_u32	reader.c	/^uint32_t buffer_read_u32(struct buffer * buffer)$/;"	f
buffer_read_u64	reader.c	/^uint64_t buffer_read_u64(struct buffer * buffer)$/;"	f
buffer_read_u8	reader.c	/^uint8_t buffer_read_u8(struct buffer * buffer)$/;"	f
calc_bit	clr.c	/^static int calc_bit(const char c) {$/;"	f	file:
calc_bit	x/clr.c	/^static int calc_bit(const char c) {$/;"	f	file:
calc_cell_size	table.c	/^static size_t calc_cell_size(struct Table * table) {$/;"	f	file:
cellSize	table.h	/^    size_t cellSize;$/;"	m	struct:Table
close	reader.c	/^    int (*close)(void *ctx);$/;"	m	struct:reader	file:
code	opcode.h	/^	unsigned char code[2];$/;"	m	struct:OpCode
context	clr.c	/^	struct Context * context;$/;"	m	struct:PrintContext	typeref:struct:PrintContext::Context	file:
context	clr.c	/^	struct Context * context;$/;"	m	struct:XContext	typeref:struct:XContext::Context	file:
context	x/clr.c	/^	struct Context * context;$/;"	m	struct:PrintContext	typeref:struct:PrintContext::Context	file:
context	x/clr.c	/^	struct Context * context;$/;"	m	struct:XContext	typeref:struct:XContext::Context	file:
ctx	reader.c	/^    void *ctx;$/;"	m	struct:reader	file:
ctx	table.h	/^	void * ctx;$/;"	m	struct:FieldInfo
dump_opcode	opcode.c	/^const char * dump_opcode(const char * ptr)$/;"	f
dumper	table.c	/^static void dumper(struct Table * table, int row, int col, const char * ptr, void * ctx)$/;"	f	file:
field	clr.c	/^	struct FieldInfo * field;$/;"	m	struct:XContext	typeref:struct:XContext::FieldInfo	file:
field	instruction.c	/^	int field;$/;"	m	struct:I_LoadField	file:
field	instruction.c	/^	int field;$/;"	m	struct:I_SaveField	file:
field	x/clr.c	/^	struct FieldInfo * field;$/;"	m	struct:XContext	typeref:struct:XContext::FieldInfo	file:
fields	header_clr.h	/^    struct FieldInfo fields[200]; \/\/ 160$/;"	m	struct:Context	typeref:struct:Context::FieldInfo
fields	table.h	/^    const struct FieldInfo * fields;$/;"	m	struct:Table	typeref:struct:Table::FieldInfo
fields	value.h	/^		struct Field * fields;$/;"	m	union:Value::__anon1	typeref:struct:Value::__anon1::Field
fields	x/header_clr.h	/^    struct FieldInfo fields[200]; \/\/ 160$/;"	m	struct:Context	typeref:struct:Context::FieldInfo
file	header_clr.h	/^    struct PEFile * file;$/;"	m	struct:Context	typeref:struct:Context::PEFile
file	x/header_clr.h	/^    struct PEFile * file;$/;"	m	struct:Context	typeref:struct:Context::PEFile
file_close	reader.c	/^static int file_close(void *ctx) {$/;"	f	file:
file_read	reader.c	/^static size_t file_read(void *ctx, char * ptr, size_t len) {$/;"	f	file:
filedUsed	header_clr.h	/^    int filedUsed;$/;"	m	struct:Context
filedUsed	x/header_clr.h	/^    int filedUsed;$/;"	m	struct:Context
find_virtual_addr	pe.c	/^const char * find_virtual_addr(struct PEFile * file, uint64_t VirtualAddress) {$/;"	f
get_field_size	clr.c	/^static int get_field_size(struct Context * context, const int values[])$/;"	f	file:
get_field_size	table.c	/^static size_t get_field_size(const struct FieldInfo * f) {$/;"	f	file:
get_field_size	x/clr.c	/^static int get_field_size(struct Context * context, const int values[])$/;"	f	file:
get_string	clr.c	/^static const char * get_string(struct Context * context, struct Table * table, int row, const char * field, const char * def)$/;"	f	file:
get_string	x/clr.c	/^static const char * get_string(struct Context * context, struct Table * table, int row, const char * field, const char * def)$/;"	f	file:
get_table_fields	clr.c	/^static struct FieldInfo * get_table_fields(struct Context * context, int i)$/;"	f	file:
get_table_fields	x/clr.c	/^static struct FieldInfo * get_table_fields(struct Context * context, int i)$/;"	f	file:
guidHeap	header_clr.h	/^    struct Slice guidHeap;$/;"	m	struct:Context	typeref:struct:Context::Slice
guidHeap	x/header_clr.h	/^    struct Slice guidHeap;$/;"	m	struct:Context	typeref:struct:Context::Slice
guid_index	clr.c	133;"	d	file:
guid_index	x/clr.c	130;"	d	file:
hex	table.c	/^static void hex(const char * ptr, size_t size)$/;"	f	file:
instructions	instruction.c	/^	struct Instruction * instructions;$/;"	m	struct:I_Call	typeref:struct:I_Call::Instruction	file:
instructions	method_body.h	/^    struct Instruction * instructions;$/;"	m	struct:MethodBody	typeref:struct:MethodBody::Instruction
is_bit_set	clr.c	/^static int is_bit_set(uint64_t value, int n) {$/;"	f	file:
is_bit_set	x/clr.c	/^static int is_bit_set(uint64_t value, int n) {$/;"	f	file:
len	reader.c	/^    size_t len;$/;"	m	struct:memory	file:
len	reader.h	/^    size_t len;$/;"	m	struct:buffer
main	main.c	/^int main(int argc, const char * argv[])$/;"	f
main	x/main.c	/^int main(int argc, const char * argv[])$/;"	f
mem_close	reader.c	/^static int mem_close(void *ctx) {$/;"	f	file:
mem_read	reader.c	/^static size_t mem_read(void *ctx, char * ptr, size_t len) {$/;"	f	file:
memory	reader.c	/^struct memory {$/;"	s	file:
name	opcode.h	/^	const char * name;$/;"	m	struct:OpCode
name	table.h	/^    const char * name;$/;"	m	struct:FieldInfo
opCodes	opcode.c	/^struct OpCode opCodes [] = {$/;"	v	typeref:struct:OpCode
opCodesCount	opcode.c	/^static const int opCodesCount = sizeof(opCodes) \/ sizeof(opCodes[0]);$/;"	v	file:
oprand	opcode.h	/^	int oprand;$/;"	m	struct:OpCode
paramCount	instruction.c	/^	int paramCount;$/;"	m	struct:I_Call	file:
parseMetatable	clr.c	/^static void parseMetatable(const char * ptr, size_t size, struct Context * context)$/;"	f	file:
parseMetatable	x/clr.c	/^static void parseMetatable(const char * ptr, size_t size, struct Context * context)$/;"	f	file:
pc	method_body.h	/^    int pc;$/;"	m	struct:MethodBody
pos	reader.h	/^    size_t pos;$/;"	m	struct:buffer
print_Blob	clr.c	/^static void print_Blob(struct Context * context, int value)$/;"	f	file:
print_Blob	x/clr.c	/^static void print_Blob(struct Context * context, int value)$/;"	f	file:
print_GUID	clr.c	/^static void print_GUID(struct Context * context, int value)$/;"	f	file:
print_GUID	x/clr.c	/^static void print_GUID(struct Context * context, int value)$/;"	f	file:
print_Hex	clr.c	/^static void print_Hex(const char * ptr, size_t len, const char * sep) $/;"	f	file:
print_Hex	x/clr.c	/^static void print_Hex(const char * ptr, size_t len, const char * sep) $/;"	f	file:
print_Index	clr.c	/^static void print_Index(struct Context * context, const int types[], int value)$/;"	f	file:
print_Index	x/clr.c	/^static void print_Index(struct Context * context, const int types[], int value)$/;"	f	file:
print_field	clr.c	/^static void print_field(void * ctx, char type, const char * name, const int values [])$/;"	f	file:
print_field	x/clr.c	/^static void print_field(void * ctx, char type, const char * name, const int values [])$/;"	f	file:
print_table	clr.c	/^static void print_table(struct Context * context, int type) $/;"	f	file:
print_table	x/clr.c	/^static void print_table(struct Context * context, int type) $/;"	f	file:
ptr	clr.c	/^	const char * ptr;$/;"	m	struct:XContext	file:
ptr	header_clr.h	/^    const char * ptr;$/;"	m	struct:Slice
ptr	header_pe.h	/^	char * ptr;$/;"	m	struct:PEFile
ptr	reader.c	/^    const char * ptr;$/;"	m	struct:memory	file:
ptr	reader.h	/^    const char * ptr;$/;"	m	struct:buffer
ptr	table.h	/^    const char * ptr;$/;"	m	struct:Table
ptr	x/clr.c	/^	const char * ptr;$/;"	m	struct:XContext	file:
ptr	x/header_clr.h	/^    const char * ptr;$/;"	m	struct:Slice
read	reader.c	/^    size_t (*read)(void *ctx, char * ptr, size_t len);$/;"	m	struct:reader	file:
read_clr	clr.c	/^int read_clr(struct Context * context, struct PEFile * file)$/;"	f
read_clr	x/clr.c	/^int read_clr(struct Context * context, struct PEFile * file)$/;"	f
read_full_file	pe.c	/^static char * read_full_file(const char * filename, size_t * size) {$/;"	f	file:
read_pe_file	pe.c	/^int read_pe_file(struct PEFile * file, const char * filename)$/;"	f
reader	reader.c	/^struct reader {$/;"	s	file:
reader_close	reader.c	/^int reader_close(struct reader * reader) {$/;"	f
reader_from_file	reader.c	/^struct reader * reader_from_file(const char * filename) {$/;"	f
reader_from_memory	reader.c	/^struct reader * reader_from_memory(const char * ptr, size_t len) {$/;"	f
reader_read	reader.c	/^size_t reader_read(struct reader * reader, char * ptr, size_t len) {$/;"	f
retCount	instruction.c	/^	int retCount;$/;"	m	struct:I_Call	file:
row	clr.c	/^	int row;$/;"	m	struct:PrintContext	file:
row	x/clr.c	/^	int row;$/;"	m	struct:PrintContext	file:
rowCount	table.h	/^    size_t rowCount;$/;"	m	struct:Table
size	header_clr.h	/^    size_t size;$/;"	m	struct:Slice
size	header_pe.h	/^	size_t size;$/;"	m	struct:PEFile
size	stack.h	/^	int size;$/;"	m	struct:Stack
size	table.h	/^    int size;$/;"	m	struct:FieldInfo
size	x/header_clr.h	/^    size_t size;$/;"	m	struct:Slice
slots	stack.h	/^	void ** slots;$/;"	m	struct:Stack
stack	method_body.h	/^    struct Stack stack;$/;"	m	struct:MethodBody	typeref:struct:MethodBody::Stack
str	value.h	/^		const char * str;$/;"	m	union:Value::__anon1
stringHeap	header_clr.h	/^    struct Slice stringHeap;$/;"	m	struct:Context	typeref:struct:Context::Slice
stringHeap	x/header_clr.h	/^    struct Slice stringHeap;$/;"	m	struct:Context	typeref:struct:Context::Slice
string_index	clr.c	132;"	d	file:
string_index	x/clr.c	129;"	d	file:
table	clr.c	/^	struct Table * table;$/;"	m	struct:PrintContext	typeref:struct:PrintContext::Table	file:
table	x/clr.c	/^	struct Table * table;$/;"	m	struct:PrintContext	typeref:struct:PrintContext::Table	file:
table_dump	table.c	/^void table_dump(struct Table * table, const char * title) {$/;"	f
table_for_each_field	clr.c	/^static void table_for_each_field(int TYPE, void(*FUNC)(void * ctx, char type, const char * name, const int values []), void * ctx) {$/;"	f	file:
table_for_each_field	x/clr.c	/^static void table_for_each_field(int TYPE, void(*FUNC)(void * ctx, char type, const char * name, const int values []), void * ctx) {$/;"	f	file:
table_get_field_size	table.c	/^static size_t table_get_field_size(struct Table * table, const char * field) {$/;"	f	file:
table_get_field_str	table.c	/^const char * table_get_field_str(struct Table * table, int row, const char * field) {$/;"	f
table_get_field_u64	table.c	/^uint64_t table_get_field_u64(struct Table * table, int row, const char * field) {$/;"	f
table_init	table.c	/^const char * table_init(struct Table * table, const struct FieldInfo * fields, const char * ptr, int rowCount) {$/;"	f
table_parse	table.c	/^void table_parse(struct Table * table, void (*parser)(struct Table * table, int row, int col, const char * ptr, void * ctx), void * ctx)$/;"	f
tables	header_clr.h	/^    struct Table tables[64];$/;"	m	struct:Context	typeref:struct:Context::Table
tables	x/header_clr.h	/^    struct Table tables[64];$/;"	m	struct:Context	typeref:struct:Context::Table
top	stack.h	/^	int top;$/;"	m	struct:Stack
type	table.h	/^    char type;$/;"	m	struct:FieldInfo
type	value.h	/^	int type;$/;"	m	struct:Field
type	value.h	/^	int type;$/;"	m	struct:Value
unicodeHeap	header_clr.h	/^    struct Slice unicodeHeap;$/;"	m	struct:Context	typeref:struct:Context::Slice
unicodeHeap	x/header_clr.h	/^    struct Slice unicodeHeap;$/;"	m	struct:Context	typeref:struct:Context::Slice
v	value.h	/^	} v;$/;"	m	struct:Value	typeref:union:Value::__anon1
value	value.h	/^	struct Value * value;$/;"	m	struct:Field	typeref:struct:Field::Value
work	main.c	/^static void work(const char * filename) $/;"	f	file:
work	x/main.c	/^static void work(const char * filename) $/;"	f	file:
